/*
 * Copyright (c) 1994, 2010, Oracle and/or its affiliates. All rights reserved.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 *
 */
package java.lang;

import java.io.ObjectStreamField;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Formatter;
import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

/**
 * The <code>String</code> class represents character strings. All
 * string literals in Java programs, such as <code>"abc"</code>, are
 * implemented as instances of this class.
  这个String类代表字符的字符串。java程序里的所有字符串常量，比如像:"abc" 等，
  都是这个类的实现实例。
 * <p>
 * Strings are constant; their values cannot be changed after they
 * are created. String buffers support mutable strings.
 * Because String objects are immutable they can be shared. For example:
  字符串是常量;他们的值在创建后不能被改变。StringBuffer支持可变字符串。 
  因为字符串对象是不可变的，他们可以被共享。例如:
 *<p><blockquote><pre>
 *     String str = "abc";
 * </pre></blockquote><p>
 * is equivalent to: 与下面的代码效果相同
 * <p><blockquote><pre>
 *     char data[] = {'a', 'b', 'c'};
 *     String str = new String(data);
 * </pre></blockquote><p>
 * Here are some more examples of how strings can be used:
  下面这些是教你怎样使用字符串的 更多例子
 * <p><blockquote><pre>
 *     System.out.println("abc");
 *     String cde = "cde";
 *     System.out.println("abc" + cde);
 *     String c = "abc".substring(2,3);
 *     String d = cde.substring(1, 2);
 * </pre></blockquote>
 * <p>
 * The class <code>String</code> includes methods for examining
 * individual characters of the sequence, for comparing strings, for
 * searching strings, for extracting substrings, and for creating a
 * copy of a string with all characters translated to uppercase or to
 * lowercase. Case mapping is based on the Unicode Standard version
 * specified by the {@link java.lang.Character Character} class.
  这个字符串类包含的方法是用来  检查个性化的字符序列、用来比较字符串、用来搜索字符串，
  用来提取子字符串，可以将一个字符串的所有字符全部转换为大写或小写字符，将转好的字符串创建出一个拷贝。
 案例的映射是基于 Cahracter类指定的Unicoade标准版本上的。 
 * <p>
 * The Java language provides special support for the string
 * concatenation operator (&nbsp;+&nbsp;), and for conversion of
 * other objects to strings. String concatenation is implemented
 * through the <code>StringBuilder</code>(or <code>StringBuffer</code>)
 * class and its <code>append</code> method.
 * String conversions are implemented through the method
 * <code>toString</code>, defined by <code>Object</code> and
 * inherited by all classes in Java. For additional information on
 * string concatenation and conversion, see Gosling, Joy, and Steele,
 * <i>The Java Language Specification</i>.
 * java语言为字符串的连接操作(+)，为其他对象转换成字符串 提供了特殊的支持。
  字符串连接操作  是通过 StringBuilder类或StringBuffer类的 append方法实现的。
  字符串转换是通过 toString方法实现的。 java中的所有类都是通过继承Object来定义的。
  字符串连接和转换的其他附加信息请参见 Gosling，Joy 。
 * <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
 * or method in this class will cause a {@link NullPointerException} to be
 * thrown.
 * 这个特别声明需要注意：传递一个null参数到这个类的构造函数或方法将导致抛出一个空指针异常。 
 * <p>A <code>String</code> represents a string in the UTF-16 format
 * in which <em>supplementary characters</em> are represented by <em>surrogate
 * pairs</em> (see the section <a href="Character.html#unicode">Unicode
 * Character Representations</a> in the <code>Character</code> class for
 * more information).
 一个String类代表UTF-16格式化的一个字符串。它的追加字符是通过 代理对 来表示的。
  多更信息 参见Character类的Unicode字符 部分。   
 * Index values refer to <code>char</code> code units, so a supplementary
 * character uses two positions in a <code>String</code>.
 * <p>The <code>String</code> class provides methods for dealing with
 * Unicode code points (i.e., characters), in addition to those for
 * dealing with Unicode code units (i.e., <code>char</code> values).
 * 下表值  参考 char代码单元，所以一个追加的字符在字符串里面使用(占用)两个位置。
  String类为Unicode码中的点(即.字符)，和Unicode码的单元(即 字符值)提供处理方法。
 * @author  Lee Boynton
 * @author  Arthur van Hoff
 * @author  Martin Buchholz
 * @author  Ulf Zibis
 * @see     java.lang.Object#toString()
 * @see     java.lang.StringBuffer
 * @see     java.lang.StringBuilder
 * @see     java.nio.charset.Charset
 * @since   JDK1.0
 */

public final class String
    implements java.io.Serializable, Comparable<String>, CharSequence {
    /** The value is used for character storage.  这个值用来存储 N个字符 */
    private final char value[];

    /** Cache the hash code for the string   为字符串的哈希码提供缓存 */
    private int hash; // Default to 0 默认为0

    /** use serialVersionUID from JDK 1.0.2 for interoperability */
    private static final long serialVersionUID = -6849794470754667710L;

    /**
     * Class String is special cased within the Serialization Stream Protocol.
     * 字符串类是序列化流协议的特殊情况。
     * A String instance is written initially into an ObjectOutputStream in the
     * following format: 字符串实例最初是以下面的格式写出到一个对象输出流里的。 
     * <pre>
     *      <code>TC_STRING</code> (utf String)
     * </pre>
     * The String is written by method <code>DataOutput.writeUTF</code>.
     * A new handle is generated to  refer to all future references to the
     * string instance within the stream.
	 字符串 是通过DataOutput.writeUTF方法写出的。 生成一个新的处理 来参考 所有未来对流中字符串的实例引用。  
     */
    private static final ObjectStreamField[] serialPersistentFields =
            new ObjectStreamField[0];

    /**
     * Initializes a newly created {@code String} object so that it represents
     * an empty character sequence.  Note that use of this constructor is
     * unnecessary since Strings are immutable. 
	 初始化一个新创建的 的字符串对象 所以他代表的是一个空的字符序列。
	 注意使用这个构造函数是多余的，因为字符串是不可变的。 
     */
    public String() {
        this.value = new char[0];
    }

    /**
     * Initializes a newly created {@code String} object so that it represents
     * the same sequence of characters as the argument; in other words, the
     * newly created string is a copy of the argument string. Unless an
     * explicit copy of {@code original} is needed, use of this constructor is
     * unnecessary since Strings are immutable.
     * 初始化创建出一个新的字符串对象， 它表示的是对应参数的相同字符序列。 
	 换句话说，新创建的字符串是这个参数字符串的一个拷贝。除非需要明确的拷贝一个oraiginal字符串，
	 使用这个构造函数是多余的，因为字符串是不可变的。 
     * @param  original
     *         A {@code String}
     */
    public String(String original) {
        this.value = original.value;
        this.hash = original.hash;
    }

    /**
     * Allocates a new {@code String} so that it represents the sequence of
     * characters currently contained in the character array argument. The
     * contents of the character array are copied; subsequent modification of
     * the character array does not affect the newly created string.
     * 分配一个新的 String。 它表示的是包含了当前字符数组参数的字符序列。 
	 字符数组的内容是拷贝的。以后对字符数组的修改将不会影响 新创建的字符串。 
     * @param  value
     *         The initial value of the string
     */
    public String(char value[]) {
        this.value = Arrays.copyOf(value, value.length);
    }

    /**
     * Allocates a new {@code String} that contains characters from a subarray
     * of the character array argument. The {@code offset} argument is the
     * index of the first character of the subarray and the {@code count}
     * argument specifies the length of the subarray. The contents of the
     * subarray are copied; subsequent modification of the character array does
     * not affect the newly created string.
     * 分配一个新的 String ，它包含的字符来自于 字符数组参数的一个子数组。
	 这offset参数是子数组的第一个字符 的下标，count参数是自数组指定的长度。
	 新字符串里面的内容 是从子数组拷贝过来的。 以后对字符数组的修改将不会对新创建的字符串产生影响。 
     * @param  value
     *         Array that is the source of characters
     *
     * @param  offset
     *         The initial offset
     *
     * @param  count
     *         The length
     *
     * @throws  IndexOutOfBoundsException
     *          If the {@code offset} and {@code count} arguments index
     *          characters outside the bounds of the {@code value} array
	 如果offset参数和count参数的下标 字符超出的vlue数组的边界则抛出下标越界异常。 
     */
    public String(char value[], int offset, int count) {
        if (offset < 0) {
            throw new StringIndexOutOfBoundsException(offset);
        }
        if (count < 0) {
            throw new StringIndexOutOfBoundsException(count);
        }
        // Note: offset or count might be near -1>>>1.
        if (offset > value.length - count) {
            throw new StringIndexOutOfBoundsException(offset + count);
        }
        this.value = Arrays.copyOfRange(value, offset, offset+count);
    }

    /**
     * Allocates a new {@code String} that contains characters from a subarray
     * of the <a href="Character.html#unicode">Unicode code point</a> array
     * argument.  The {@code offset} argument is the index of the first code
     * point of the subarray and the {@code count} argument specifies the
     * length of the subarray.  The contents of the subarray are converted to
     * {@code char}s; subsequent modification of the {@code int} array does not
     * affect the newly created string.
     *从Unicode码 指向的数组参数的子数组里分配一个包含字符的新字符串。这offset参数指向的是子数组的第一处代码的索引，
	 count 参数 指定了子数组的长度。这子数组的内容是从 字符s 转换过来的。以后对int数组的修改不会对新创建的字符串产生影响。
     * @param  codePoints
     *         Array that is the source of Unicode code points
     *			这数组指向unicode码
     * @param  offset
     *         The initial offset
     *          初始化的偏移位置
     * @param  count
     *         The length
     *	
     * @throws  IllegalArgumentException
     *          If any invalid Unicode code point is found in {@code
     *          codePoints}
     *    如果在代码指向的位置发现任何无效的unicode码则会抛出 非法参数异常
     * @throws  IndexOutOfBoundsException
     *          If the {@code offset} and {@code count} arguments index
     *          characters outside the bounds of the {@code codePoints} array
     *	如果参数 offset和count的索引字符超出了数组的边界，就会抛出数组下标越界异常。 
     * @since  1.5
     */
    public String(int[] codePoints, int offset, int count) {
        if (offset < 0) {
            throw new StringIndexOutOfBoundsException(offset);
        }
        if (count < 0) {
            throw new StringIndexOutOfBoundsException(count);
        }
        // Note: offset or count might be near -1>>>1.
		//注意: offset 或 count 可能为-1 或1 
        if (offset > codePoints.length - count) {
            throw new StringIndexOutOfBoundsException(offset + count);
        }

        final int end = offset + count;

        // Pass 1: Compute precise size of char[]
		//通过1： 计算字符数组的精确大小
        int n = count;
        for (int i = offset; i < end; i++) {
            int c = codePoints[i];
            if (Character.isBmpCodePoint(c))
                continue;
            else if (Character.isValidCodePoint(c))
                n++;
            else throw new IllegalArgumentException(Integer.toString(c));
        }

        // Pass 2: Allocate and fill in char[]
		//通过2: 分配并填充 字符数组
        final char[] v = new char[n];

        for (int i = offset, j = 0; i < end; i++, j++) {
            int c = codePoints[i];
            if (Character.isBmpCodePoint(c))
                v[j] = (char)c;
            else
                Character.toSurrogates(c, v, j++);
        }

        this.value = v;
    }

    /**
     * Allocates a new {@code String} constructed from a subarray of an array
     * of 8-bit integer values.
     *从一个8字节整数形值数组的子数组里 分配一个新String
     * <p> The {@code offset} argument is the index of the first byte of the
     * subarray, and the {@code count} argument specifies the length of the
     * subarray.
     * offset这个参数是子数组的第一个字节，count指定了 这个子数组的长度
     * <p> Each {@code byte} in the subarray is converted to a {@code char} as
     * specified in the method above.
     * 每一个子数组里的字节 都是在特定的方法上转换成 一个 字符的。
     * @deprecated This method does not properly convert bytes into characters.
	 * 不推荐  这个方法不能正确的将字节转成 字符
     * As of JDK&nbsp;1.1, the preferred way to do this is via the
     * {@code String} constructors that take a {@link
     * java.nio.charset.Charset}, charset name, or that use the platform's
     * default charset.
     * 在JDK1.1 以后 就建议最好 通过String类的构造方法的方式 来获取一个字符集或使用平台默认的字符集
     * @param  ascii
     *         The bytes to be converted to characters
     *			ascii这个参数 代表将 字节数组转换成 字符数组
     * @param  hibyte
     *         The top 8 bits of each 16-bit Unicode code unit
     *			hibyte参数 代表每个16字节的unicode码单位的高8位字节
     * @param  offset
     *         The initial offset
				初始化偏移量
     * @param  count
     *         The length
     *			长度
     * @throws  IndexOutOfBoundsException
     *          If the {@code offset} or {@code count} argument is invalid
     *			如果offset参数或count参数是无效的就会抛出数组下标越界异常
     * @see  #String(byte[], int)
     * @see  #String(byte[], int, int, java.lang.String)
     * @see  #String(byte[], int, int, java.nio.charset.Charset)
     * @see  #String(byte[], int, int)
     * @see  #String(byte[], java.lang.String)
     * @see  #String(byte[], java.nio.charset.Charset)
     * @see  #String(byte[])
     */
    @Deprecated
    public String(byte ascii[], int hibyte, int offset, int count) {
        checkBounds(ascii, offset, count);
        char value[] = new char[count];

        if (hibyte == 0) {
            for (int i = count; i-- > 0;) {
                value[i] = (char)(ascii[i + offset] & 0xff);
            }
        } else {
            hibyte <<= 8;
            for (int i = count; i-- > 0;) {
                value[i] = (char)(hibyte | (ascii[i + offset] & 0xff));
            }
        }
        this.value = value;
    }

    /**
     * Allocates a new {@code String} containing characters constructed from
     * an array of 8-bit integer values. Each character <i>c</i>in the
     * resulting string is constructed from the corresponding component
     * <i>b</i> in the byte array such that:
     *分配一个新的String代码 ，它包含了8位整型值数组的字符构造。字符串产生的每一个字符都是从对应的字节数组里构造的
     * <blockquote><pre> 像这样:
     *     <b><i>c</i></b> == (char)(((hibyte &amp; 0xff) &lt;&lt; 8)
     *                         | (<b><i>b</i></b> &amp; 0xff))
     * </pre></blockquote>
     *
     * @deprecated  This method does not properly convert bytes into
     * characters.  As of JDK&nbsp;1.1, the preferred way to do this is via the
     * {@code String} constructors that take a {@link
     * java.nio.charset.Charset}, charset name, or that use the platform's
     * default charset.
     * @不推荐： 这个方法不能正确的将字节转换为 字符，在JDK1.1以后，首选通过String类的构造函数来获得一个 字符编码集
	  字符集名， 或使用平台默认的字符集。
     * @param  ascii
     *         The bytes to be converted to characters
     *			ascii这个字节数组 将会被转换为 characters
     * @param  hibyte
     *         The top 8 bits of each 16-bit Unicode code unit
     *		hibyte参数表示每个16字节的unciode码单元的高8位
     * @see  #String(byte[], int, int, java.lang.String)
     * @see  #String(byte[], int, int, java.nio.charset.Charset)
     * @see  #String(byte[], int, int)
     * @see  #String(byte[], java.lang.String)
     * @see  #String(byte[], java.nio.charset.Charset)
     * @see  #String(byte[])
     */
    @Deprecated
    public String(byte ascii[], int hibyte) {
        this(ascii, hibyte, 0, ascii.length);
    }

    /* Common private utility method used to bounds check the byte array
     * and requested offset & length values used by the String(byte[],..)
     * constructors.
	 * 通常用这私有的实用方法 来检测字节数组和请求的 偏移&长度值 为String的构造方法服务。
     */
    private static void checkBounds(byte[] bytes, int offset, int length) {
        if (length < 0)
            throw new StringIndexOutOfBoundsException(length);
        if (offset < 0)
            throw new StringIndexOutOfBoundsException(offset);
        if (offset > bytes.length - length)
            throw new StringIndexOutOfBoundsException(offset + length);
    }

    /**
     * Constructs a new {@code String} by decoding the specified subarray of
     * bytes using the specified charset.  The length of the new {@code String}
     * is a function of the charset, and hence may not be equal to the length
     * of the subarray.
     * 通过 new String的 构造方式 使用指定的字符编码方式来 解码一个指定的字节子数组。
	 这个 新String 的长度是 charset的一个函数，因此和子数组的长度 不可以相等。
     * <p> The behavior of this constructor when the given bytes are not valid
     * in the given charset is unspecified.  The {@link
     * java.nio.charset.CharsetDecoder} class should be used when more control
     * over the decoding process is required.
     * 当字符集未指明时，给这构造函数给予字节的行为是无效的。 当需要更多的控制解码过程时使用CharsetDecode这个类
     * @param  bytes
     *         The bytes to be decoded into characters
     *			字节被解码为字符
     * @param  offset
     *         The index of the first byte to decode
     *			第一个被解码的字节的下标
     * @param  length
     *         The number of bytes to decode
				待解码的字节的长度
     * @param  charsetName
     *         The name of a supported {@linkplain java.nio.charset.Charset
     *         charset}
     *			被支持的字节编码 格式
     * @throws  UnsupportedEncodingException
     *          If the named charset is not supported
     *			当charset的名字不被支持时抛出这个异常
     * @throws  IndexOutOfBoundsException
     *          If the {@code offset} and {@code length} arguments index
     *          characters outside the bounds of the {@code bytes} array
     *		如果参数offset和length的下标字符 出现数组越界则抛出这个异常
     * @since  JDK1.1
     */
    public String(byte bytes[], int offset, int length, String charsetName)
            throws UnsupportedEncodingException {
        if (charsetName == null)
            throw new NullPointerException("charsetName");
        checkBounds(bytes, offset, length);
        this.value = StringCoding.decode(charsetName, bytes, offset, length);
    }

    /**
     * Constructs a new {@code String} by decoding the specified subarray of
     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.
	 使用指定的 字符集对 指定 的字节数组 执行 译码 构造成一个新的字符串
     * The length of the new {@code String} is a function of the charset, and
     * hence may not be equal to the length of the subarray.
     * 这个新字符串的长度值 是字符集的一个方法，所以这个长度值和子数组的长度 不相等。
     * <p> This method always replaces malformed-input and unmappable-character
     * sequences with this charset's default replacement string.  
	 * 这个方法总是替换有缺陷的输入 并且，是用字符集默认的字符串来替换 不能表示的字符序列
	 * The {@link java.nio.charset.CharsetDecoder} class should be used when more control
     * over the decoding process is required.
     * 当有更多 控制解码的需求时 ，需要使用CharsetDecoder这个类
     * @param  bytes
     *         The bytes to be decoded into characters
     *		bytes表示即将被  译码为 字符。
     * @param  offset
     *         The index of the first byte to decode
     *		 被译码的第一个字节的索引下标
     * @param  length
     *         The number of bytes to decode
     *		被译码的字节的长度数
     * @param  charset
     *         The {@linkplain java.nio.charset.Charset charset} to be used to
     *         decode the {@code bytes}
     *	  charset表示 对 bytes参数 执行解码 使用的 字符集
     * @throws  IndexOutOfBoundsException
     *          If the {@code offset} and {@code length} arguments index
     *          characters outside the bounds of the {@code bytes} array
     *    如果offset参数和 length参数的下标字符 在bytes数组出现越界，就会抛出数组下标越界异常
     * @since  1.6
     */
    public String(byte bytes[], int offset, int length, Charset charset) {
        if (charset == null)
            throw new NullPointerException("charset");
        checkBounds(bytes, offset, length);
        this.value =  StringCoding.decode(charset, bytes, offset, length);
    }

    /**
     * Constructs a new {@code String} by decoding the specified array of bytes
     * using the specified {@linkplain java.nio.charset.Charset charset}.  
	 * 使用指定的字符集将 指定的字节数组 解码 成一个新的 字符串
     * The length of the new {@code String} is a function of the charset, and hence
     * may not be equal to the length of the byte array.
     * 这个新字符串的 长度是 字符集的一个 函数，因此它和字节数组的长度是不相等的。
     * <p> The behavior of this constructor when the given bytes are not valid
     * in the given charset is unspecified.  The {@link
     * java.nio.charset.CharsetDecoder} class should be used when more control
     * over the decoding process is required.
     * 当给予的 字符集是未指明的，那么这个构造方法的行为 中 给予的字节就不是有效的。
	 * 当有更多 控制解码的需求时 ，需要使用CharsetDecoder这个类 
	 @param  bytes
     *         The bytes to be decoded into characters
     *		  bytes表示 即将 为解码为 某字符集的参数
     * @param  charsetName
     *         The name of a supported {@linkplain java.nio.charset.Charset
     *         charset}
     *			这个字符集的名字 只能是 Charset类中支持的名字
     * @throws  UnsupportedEncodingException
     *          If the named charset is not supported
     *		如果这个字符集的名字是不支持的就抛出这个异常
     * @since  JDK1.1
     */
    public String(byte bytes[], String charsetName)
            throws UnsupportedEncodingException {
        this(bytes, 0, bytes.length, charsetName);
    }

    /**
     * Constructs a new {@code String} by decoding the specified array of
     * bytes using the specified {@linkplain java.nio.charset.Charset charset}.
     * The length of the new {@code String} is a function of the charset, and
     * hence may not be equal to the length of the byte array.
     * 使用指定的字符集对指定的字节数组进行译码 ，构造出一个新的 字符串。
	 * 这个新字符串的长度是 字符集的一个方法，因此字节数组的长度不可以和这字符串的长度相等
     * <p> This method always replaces malformed-input and unmappable-character
     * sequences with this charset's default replacement string.  The {@link
     * java.nio.charset.CharsetDecoder} class should be used when more control
     * over the decoding process is required.
     * 这个方法总是 对 形式错误的输入 和不可映射的字符序列用字符集默认的 替换字符串替换。
	 * 当需要更多的 控制解码处理时，必须使用CharsetDecoder类
     * @param  bytes
     *         The bytes to be decoded into characters
     *			这个bytes参数 代表将要被译码的字节
     * @param  charset
     *         The {@linkplain java.nio.charset.Charset charset} to be used to
     *         decode the {@code bytes}
     *	   charset代表 解码 所使用的字符集。
     * @since  1.6
     */
    public String(byte bytes[], Charset charset) {
        this(bytes, 0, bytes.length, charset);
    }

    /**
     * Constructs a new {@code String} by decoding the specified subarray of
     * bytes using the platform's default charset.  The length of the new
     * {@code String} is a function of the charset, and hence may not be equal
     * to the length of the subarray.
     * 使用平台默认的字符集 将指定的字节数组 译码 构造出一个新的字符串。
	 * 这个字符串的 长度是charset类的一个函数，因此它的长度不可以和子数组的长度相等。 
     * <p> The behavior of this constructor when the given bytes are not valid
     * in the default charset is unspecified.  The {@link
     * java.nio.charset.CharsetDecoder} class should be used when more control
     * over the decoding process is required.
     * 当给定的字节无效时，这个构造函数的行为在 默认字符集里是未指明的。
	 * 当需要 更多的控制译码处理时，应该使用CharsetDecoder类
     * @param  bytes
     *         The bytes to be decoded into characters
     *		这个bytes参数 译码为 某种字符编码
     * @param  offset
     *         The index of the first byte to decode
     *		第一个将被译码的字节的索引下标
     * @param  length
     *         The number of bytes to decode
     *		将被译码的字节数
     * @throws  IndexOutOfBoundsException
     *          If the {@code offset} and the {@code length} arguments index
     *          characters outside the bounds of the {@code bytes} array
     *	如果 参数offset和length 参数的索引字符超出数组边界时，抛出这个异常
     * @since  JDK1.1
     */
    public String(byte bytes[], int offset, int length) {
        checkBounds(bytes, offset, length);
        this.value = StringCoding.decode(bytes, offset, length);
    }

    /**
     * Constructs a new {@code String} by decoding the specified array of bytes
     * using the platform's default charset.  The length of the new {@code
     * String} is a function of the charset, and hence may not be equal to the
     * length of the byte array.
     * 使用平台默认的字符集 对指定的字节数组执行译码 构造出一个新的字符串。这个新字符串
	 * 的长度是Charset类的一个函数，所以它的长度和字节数组的长度不相等。
     * <p> The behavior of this constructor when the given bytes are not valid
     * in the default charset is unspecified.  The {@link
     * java.nio.charset.CharsetDecoder} class should be used when more control
     * over the decoding process is required.
     * 当给定的字节无效时，这个构造函数的行为在默认字符集里是未指明的。当需要更多控制译码处理时，
	 * 应该使用 CharsetDecoder类
     * @param  bytes
     *         The bytes to be decoded into characters
     *		这个bytes参数 将被译码为 某种字符编码。
     * @since  JDK1.1
     */
    public String(byte bytes[]) {
        this(bytes, 0, bytes.length);
    }

    /**
     * Allocates a new string that contains the sequence of characters
     * currently contained in the string buffer argument. The contents of the
     * string buffer are copied; subsequent modification of the string buffer
     * does not affect the newly created string.
     * 为 在StringBuffer参数里分配一个 包含当前字符序列的新字符串。它里面的内容是从StringBuffer里拷贝过来的。
	 * 以后对StringBuffer参数的修改 就不会影响到 这个最新创建的字符串了
     * @param  buffer
     *         A {@code StringBuffer}
     */
    public String(StringBuffer buffer) {
        synchronized(buffer) {
            this.value = Arrays.copyOf(buffer.getValue(), buffer.length());
        }
    }

    /**
     * Allocates a new string that contains the sequence of characters
     * currently contained in the string builder argument. The contents of the
     * string builder are copied; subsequent modification of the string builder
     * does not affect the newly created string.
     * 给 这个StringBuilder参数 分配一个包含里面的字符序列的新的 字符串。
	 * 这新字符串的内容是从Stringbuilder拷贝过来的 以后对StringBuilder参数的修改就不会影响到新创建的这个字符串了
     * <p> This constructor is provided to ease migration to {@code
     * StringBuilder}. Obtaining a string from a string builder via the {@code
     * toString} method is likely to run faster and is generally preferred.
     * 这个构造方法是的从StringBuilder 迁移成字符串更轻松方便。 通过StringBuilder获得字符串 首选使用这样的通用快捷方法
     * @param   builder
     *          A {@code StringBuilder}
     *
     * @since  1.5
     */
    public String(StringBuilder builder) {
        this.value = Arrays.copyOf(builder.getValue(), builder.length());
    }

    /*
    * Package private constructor which shares value array for speed.
	* 包中的那个私有构造函数 加速的value数组的共享。
    * this constructor is always expected to be called with share==true.
	* 总是当share为true的时候调用这个 构造方法。
    * a separate constructor is needed because we already have a public
    * String(char[]) constructor that makes a copy of the given char[].
	* 一个单独的构造函数是需要的，因为我们已经准备了一个公开的构造函数 用来拷贝给定的字符数组
    */
    String(char[] value, boolean share) {
        // assert share : "unshared not supported";
        //维护共享 :"未共享的是不支持的";
		this.value = value;
    }

    /**
     * Package private constructor
     * 包内的私有构造方法
     * @deprecated Use {@link #String(char[],int,int)} instead.
	 * 不推荐使用 这个 来替换
     */
    @Deprecated
    String(int offset, int count, char[] value) {
        this(value, offset, count);
    }

    /**
     * Returns the length of this string.
     * The length is equal to the number of <a href="Character.html#unicode">Unicode
     * code units</a> in the string.
     * 返回一个字符串的长度 ，这个长度和String力度 unicode码单位的数字相等。
     * @return  the length of the sequence of characters represented by this
	 * 代表这个字符序列 的长度
     *          object.
     */
    public int length() {
        return value.length;
    }

    /**
     * Returns <tt>true</tt> if, and only if, {@link #length()} is <tt>0</tt>.
     * 
     * @return <tt>true</tt> if {@link #length()} is <tt>0</tt>, otherwise
     * <tt>false</tt>
     * 如果字符串的 长度为0返回true；其他情况返回false
     * @since 1.6
     */
    public boolean isEmpty() {
        return value.length == 0;
    }

    /**
     * Returns the <code>char</code> value at the
     * specified index. An index ranges from <code>0</code> to
     * <code>length() - 1</code>. The first <code>char</code> value of the sequence
     * is at index <code>0</code>, the next at index <code>1</code>,
     * and so on, as for array indexing.
     * 返回指定索引出的字符值。这个索引范围从0~长度-1 。0是这个序列之的第一个索引字符。下一个字符是1以此类推，直到遍历玩这个数组的索引
     * <p>If the <code>char</code> value specified by the index is a
     * <a href="Character.html#unicode">surrogate</a>, the surrogate
     * value is returned.
     * 如果指定索引的字符值是一个代理值，就返回这个代理值
     * @param      index   the index of the <code>char</code> value.  index代表字符值的索引位置
     * @return     the <code>char</code> value at the specified index of this string. 返回String中指定索引的char值
     *             The first <code>char</code> value is at index <code>0</code>. 第一个字符值 从索引0开始
     * @exception  IndexOutOfBoundsException  if the <code>index</code> 如果索引参数 是负数或者不小于字符串的长度就抛出下标越界异常
     *             argument is negative or not less than the length of this 
     *             string.
     */
    public char charAt(int index) {
        if ((index < 0) || (index >= value.length)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return value[index];
    }

    /**
     * Returns the character (Unicode code point) at the specified
     * index. The index refers to <code>char</code> values
     * (Unicode code units) and ranges from <code>0</code> to
     * {@link #length()}<code> - 1</code>.
     * 返回指定索引处 的字符值这个索引参考字符值的范围从0到length-1
     * <p> If the <code>char</code> value specified at the given index
     * is in the high-surrogate range, the following index is less
     * than the length of this <code>String</code>, and the
     * <code>char</code> value at the following index is in the
     * low-surrogate range, then the supplementary code point
     * corresponding to this surrogate pair is returned. Otherwise,
     * the <code>char</code> value at the given index is returned.
     * 如果字符值在指定的高代理范围内，它的下一个索引是小于这个字符串的长度的，
	 * 这个字符值的如下索引在低代理范围内，那么返回的是这个指向 增补的code码对应的代理对。
	 *　此外　返回char值所在处 的索引
     * @param      index the index to the <code>char</code> values
	 *     index参数是 索引对应的char值
     * @return     the code point value of the character at the 返回index在字符集里指向的code值
     *             <code>index</code>
     * @exception  IndexOutOfBoundsException  if the <code>index</code>
     *             argument is negative or not less than the length of this
     *             string.
	 * 		如果index参数是负数或者不小于这个字符串的长度就抛出下标越界异常
     * @since      1.5
     */
    public int codePointAt(int index) {
        if ((index < 0) || (index >= value.length)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return Character.codePointAtImpl(value, index, value.length);
    }

    /**
     * Returns the character (Unicode code point) before the specified
     * index. The index refers to <code>char</code> values
     * (Unicode code units) and ranges from <code>1</code> to {@link
     * CharSequence#length() length}.
     * 返回指定索引在Unicode字符集中的前一个。这index参考的字符值(Unicode码)的范围是从1到字符序列的长度
     * <p> If the <code>char</code> value at <code>(index - 1)</code>
     * is in the low-surrogate range, <code>(index - 2)</code> is not
     * negative, and the <code>char</code> value at <code>(index -
     * 2)</code> is in the high-surrogate range, then the
     * supplementary code point value of the surrogate pair is
     * returned. If the <code>char</code> value at <code>index -
     * 1</code> is an unpaired low-surrogate or a high-surrogate, the
     * surrogate value is returned.
     *如果字符值在index-1 就是在低代理范围内，index-2不是负数，并且字符值在index-2在高代理范围内，
	 * 那么返回递增的code值 处的代理对。如果字符值在index-1不符合低代理对或高代理对，就返回这个代理对的值
     * @param     index the index following the code point that should be returned
	 *  返回的必须是index指向的下一个索引
     * @return    the Unicode code point value before the given index. 
	 *  返回给给定索引处之前的 Unicode码值
     * @exception IndexOutOfBoundsException if the <code>index</code>
     *            argument is less than 1 or greater than the length
     *            of this string.
	 *  如果index参数小于1 或大于这字符串的长度就抛出 下标越界异常。
     * @since     1.5
     */
    public int codePointBefore(int index) {
        int i = index - 1;
        if ((i < 0) || (i >= value.length)) {
            throw new StringIndexOutOfBoundsException(index);
        }
        return Character.codePointBeforeImpl(value, index, 0);
    }

    /**
     * Returns the number of Unicode code points in the specified text
     * range of this <code>String</code>. The text range begins at the
     * specified <code>beginIndex</code> and extends to the
     * <code>char</code> at index <code>endIndex - 1</code>. Thus the
     * length (in <code>char</code>s) of the text range is
     * <code>endIndex-beginIndex</code>. Unpaired surrogates within
     * the text range count as one code point each.
     * 返回这字符串范围内的指定文本的的Unicode码的数字。这个文字范围开始于指定的beginIndex参数和扩展到索引为endInex-1.
	 * 因此这文字范围的长度是 endIndex-beginIndex。文字范围内的每一个code码的未配对代理。 
     * @param beginIndex the index to the first <code>char</code> of
     * the text range.  beginIndexh是文字范围的第一个索引
     * @param endIndex the index after the last <code>char</code> of
     * the text range. endInex是文字范围的最后一个索引
     * @return the number of Unicode code points in the specified text
     * range 返回指定文字指向的Unicode码的数字
     * @exception IndexOutOfBoundsException if the
     * <code>beginIndex</code> is negative, or <code>endIndex</code>
     * is larger than the length of this <code>String</code>, or
     * <code>beginIndex</code> is larger than <code>endIndex</code>.
     * @since  1.5 如果beginIndex是负数或endInex等于字符串的长度或beginIndex等于endInex就抛出异常
     */
    public int codePointCount(int beginIndex, int endIndex) {
        if (beginIndex < 0 || endIndex > value.length || beginIndex > endIndex) {
            throw new IndexOutOfBoundsException();
        }
        return Character.codePointCountImpl(value, beginIndex, endIndex - beginIndex);
    }

    /**
     * Returns the index within this <code>String</code> that is
     * offset from the given <code>index</code> by
     * <code>codePointOffset</code> code points. Unpaired surrogates
     * within the text range given by <code>index</code> and
     * <code>codePointOffset</code> count as one code point each.
     * 返回String内这index的偏移值 从给予的index通过指向的codePointOffset。
	 * 文本范围内的未配对的代里 给予通过index和codePointOffset 对每一个代码计数。
     * @param index the index to be offset index到偏移处的索引
     * @param codePointOffset the offset in code points 指向的偏移
     * @return the index within this <code>String</code> 返回String里的索引
     * @exception IndexOutOfBoundsException if <code>index</code>
     *   is negative or larger then the length of this  如果index是负数或等于这个字符串的 长度
     *   <code>String</code>, or if <code>codePointOffset</code> is positive
     *   and the substring starting with <code>index</code> has fewer
     *   than <code>codePointOffset</code> code points, 或如果codePointOffset是整数并且字串开始于index。
     *   or if <code>codePointOffset</code> is negative and the substring
     *   before <code>index</code> has fewer than the absolute value
     *   of <code>codePointOffset</code> code points.
	 *  或如果codePointOffset 是负数和 字串之前的index有较少的 绝对值。
     * @since 1.5
     */
    public int offsetByCodePoints(int index, int codePointOffset) {
        if (index < 0 || index > value.length) {
            throw new IndexOutOfBoundsException();
        }
        return Character.offsetByCodePointsImpl(value, 0, value.length,
                index, codePointOffset);
    }

    /**
     * Copy characters from this string into dst starting at dstBegin.
     * This method doesn't perform any range checking.  
	 * 从这个字符串里拷贝字符 到dst字符数组，从dstBegin开始拷贝。 这个方法不能执行 检测任何参数的范围。 
     */
    void getChars(char dst[], int dstBegin) {
        System.arraycopy(value, 0, dst, dstBegin, value.length);
    }

    /**
     * Copies characters from this string into the destination character
     * array. 从这个字符串拷贝字符到目标的字符数组
     * <p>
     * The first character to be copied is at index <code>srcBegin</code>; 第一个开始拷贝的字符是srcBegin的位置
     * the last character to be copied is at index <code>srcEnd-1</code> 最后一个拷贝的字符是在srcEnd-1 的位置
     * (thus the total number of characters to be copied is 因此被拷贝的字符总数是 srcEnd-srcBegin 
     * <code>srcEnd-srcBegin</code>). The characters are copied into the
     * subarray of <code>dst</code> starting at index <code>dstBegin</code>
     * and ending at index:
	 * 这个字符串 是从dstBegin的下标开始直到结束的位置拷贝到 dst子数组里 
     * <p><blockquote><pre>
     *     dstbegin + (srcEnd-srcBegin) - 1
     * </pre></blockquote>
     *
     * @param      srcBegin   index of the first character in the string
     *                        to copy. 字符串里 第一个被拷贝的字符下标位置
     * @param      srcEnd     index after the last character in the string
     *                        to copy.字符串里最后一个被拷贝的字符下标位置
     * @param      dst        the destination array.  目标数组
     * @param      dstBegin   the start offset in the destination array. 目标数组里的开始偏移位置
     * @exception IndexOutOfBoundsException If any of the following
     *            is true:  如果发生下列的任意项为true就抛出异常
     *            <ul><li><code>srcBegin</code> is negative.  srcBegin是负数
     *            <li><code>srcBegin</code> is greater than <code>srcEnd</code>  srcBegin大于srcEnd
     *            <li><code>srcEnd</code> is greater than the length of this
     *                string srcEnd大于这个字符串的 长度
     *            <li><code>dstBegin</code> is negative   dstBegin 是负数
     *            <li><code>dstBegin+(srcEnd-srcBegin)</code> is larger than
     *                <code>dst.length</code></ul>  如dstBegin+(srcEnd-srcBegin)大于dst.length时
     */
    public void getChars(int srcBegin, int srcEnd, char dst[], int dstBegin) {
        if (srcBegin < 0) {
            throw new StringIndexOutOfBoundsException(srcBegin);
        }
        if (srcEnd > value.length) {
            throw new StringIndexOutOfBoundsException(srcEnd);
        }
        if (srcBegin > srcEnd) {
            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);
        }
        System.arraycopy(value, srcBegin, dst, dstBegin, srcEnd - srcBegin);
    }

    /**
     * Copies characters from this string into the destination byte array. Each
     * byte receives the 8 low-order bits of the corresponding character. The
     * eight high-order bits of each character are not copied and do not
     * participate in the transfer in any way.
     * 从这个字符串拷贝字符到目标字节数组。每个字节接收对应的低8位字符。
	 * 每个字符的高8位都不会被拷贝 ，不会以任何方式参与到其中。
     * <p> The first character to be copied is at index {@code srcBegin}; the
     * last character to be copied is at index {@code srcEnd-1}.  The total
     * number of characters to be copied is {@code srcEnd-srcBegin}. The
     * characters, converted to bytes, are copied into the subarray of {@code
     * dst} starting at index {@code dstBegin} and ending at index:
     * srcBegin是第一个被拷贝字符的索引位置。srcEnd-1 是最后一个被拷贝字符的位置。
	 * 拷贝的字符的总数是 srcEnd-srcBegin。这个字符序列 转换为字节是通过： 从dstBegin的下标开始拷贝到末尾的索引位置到dst的子数组。
     * <blockquote><pre>
     *     dstbegin + (srcEnd-srcBegin) - 1
     * </pre></blockquote>
     *
     * @deprecated  This method does not properly convert characters into
     * bytes.  As of JDK&nbsp;1.1, the preferred way to do this is via the
     * {@link #getBytes()} method, which uses the platform's default charset.
     *  这个方法不能正确将字符转换为字节。JDK1.1的时候，首选方式是通过getBytes方法来实现，使用平台提供的默认字符集。
     * @param  srcBegin
     *         Index of the first character in the string to copy
     *			字符串里第一个被拷贝的字符的下标位置
     * @param  srcEnd
     *         Index after the last character in the string to copy
     *		字符串里最后一个被拷贝的字符的下标位置。
     * @param  dst
     *         The destination array
     *		目标数组
     * @param  dstBegin
     *         The start offset in the destination array
     *		目标数组的开始偏移位置。
     * @throws  IndexOutOfBoundsException
     *          If any of the following is true: 如果下面任一项为真就抛异常
     *          <ul>
     *            <li> {@code srcBegin} is negative srcBegin是 负数
     *            <li> {@code srcBegin} is greater than {@code srcEnd}  srcBegin大于srcEnd
     *            <li> {@code srcEnd} is greater than the length of this String srcEnd大于 这个字符串的长度
     *            <li> {@code dstBegin} is negative dstBegin 是负数
     *            <li> {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code
     *                 dst.length} dst+(srcEnd-srcBegin)  大于dst.length
     *          </ul>
     */
    @Deprecated
    public void getBytes(int srcBegin, int srcEnd, byte dst[], int dstBegin) {
        if (srcBegin < 0) {
            throw new StringIndexOutOfBoundsException(srcBegin);
        }
        if (srcEnd > value.length) {
            throw new StringIndexOutOfBoundsException(srcEnd);
        }
        if (srcBegin > srcEnd) {
            throw new StringIndexOutOfBoundsException(srcEnd - srcBegin);
        }
        int j = dstBegin;
        int n = srcEnd;
        int i = srcBegin;
        char[] val = value;   /* avoid getfield opcode */  //避免get属性的操作

        while (i < n) {
            dst[j++] = (byte)val[i++];
        }
    }

    /**
     * Encodes this {@code String} into a sequence of bytes using the named
     * charset, storing the result into a new byte array.
     * 使用传过来的参数charsetName字符集将字符串编码到一个字节序列里，存储结果到一个新的字节数组。
     * <p> The behavior of this method when this string cannot be encoded in
     * the given charset is unspecified.  The {@link
     * java.nio.charset.CharsetEncoder} class should be used when more control
     * over the encoding process is required.
     * 当给予的charsetName是未指明的字符集时，这个方法的行为不能执行编码。当有更多的编码处理请求时使应该使用CharsetEncoder这个类
     * @param  charsetName
     *         The name of a supported {@linkplain java.nio.charset.Charset
     *         charset}
     *		这个charsetName必须是 Charset类里支持的才行
     * @return  The resultant byte array
     *  返回得到的字节数组
     * @throws  UnsupportedEncodingException
     *          If the named charset is not supported
     *  如果这个charsetName参数 是不被支持的字符集就抛出异常
     * @since  JDK1.1
     */
    public byte[] getBytes(String charsetName)
            throws UnsupportedEncodingException {
        if (charsetName == null) throw new NullPointerException();
        return StringCoding.encode(charsetName, value, 0, value.length);
    }

    /**
     * Encodes this {@code String} into a sequence of bytes using the given
     * {@linkplain java.nio.charset.Charset charset}, storing the result into a
     * new byte array.
     * 使用给定的字符集将这个字符串编码到 一个字节序列里。保存结果到一个新的字节数组。
     * <p> This method always replaces malformed-input and unmappable-character
     * sequences with this charset's default replacement byte array.  The
     * {@link java.nio.charset.CharsetEncoder} class should be used when more
     * control over the encoding process is required.
     * 这个方法经常用默认字符集自带的备用字节数组来替换错误的输入和不能映射的字符序列。
	 *当需要更多的控制编码处理时，应该使用charsetEncoder类。
     * @param  charset
     *         The {@linkplain java.nio.charset.Charset} to be used to encode
     *         the {@code String}
     *  使用charset参数的字符集来将字符串编码。
     * @return  The resultant byte array
     *  返回  合成的字节数组
     * @since  1.6
     */
    public byte[] getBytes(Charset charset) {
        if (charset == null) throw new NullPointerException();
        return StringCoding.encode(charset, value, 0, value.length);
    }

    /**
     * Encodes this {@code String} into a sequence of bytes using the
     * platform's default charset, storing the result into a new byte array.
     * 使用平台默认的字符集将字符串编码到一个字节序列里。存储结果到一个新字节数组里。 
     * <p> The behavior of this method when this string cannot be encoded in
     * the default charset is unspecified.  The {@link
     * java.nio.charset.CharsetEncoder} class should be used when more control
     * over the encoding process is required.
     * 当默认字符集 未指定时，这个方法的行为不能对字符串进行编码。当需要更多控制编码的处理时应该使用CharsetEncoder这个类。
     * @return  The resultant byte array
     *
     * @since      JDK1.1
     */
    public byte[] getBytes() {
        return StringCoding.encode(value, 0, value.length);
    }

    /**
     * Compares this string to the specified object.  The result is {@code
     * true} if and only if the argument is not {@code null} and is a {@code
     * String} object that represents the same sequence of characters as this
     * object. 将这个字符串与指定的对象做比较。如果这个anObject参数不为空，
     *  并且是一个代表和这个对象一样的字符序列的对象。就返回ture
     * @param  anObject
     *         The object to compare this {@code String} against
     *    与这个字符串做比较的对象
     * @return  {@code true} if the given object represents a {@code String}
     *          equivalent to this string, {@code false} otherwise
     * 如果给予的对象表现的是一个与这个字符串相等的字符串，就返回ture，其他情况返回false
     * @see  #compareTo(String)
     * @see  #equalsIgnoreCase(String)
     */
    public boolean equals(Object anObject) {
        if (this == anObject) {
            return true;
        }
        if (anObject instanceof String) {
            String anotherString = (String) anObject;
            int n = value.length;
            if (n == anotherString.value.length) {
                char v1[] = value;
                char v2[] = anotherString.value;
                int i = 0;
                while (n-- != 0) {
                    if (v1[i] != v2[i])
                            return false;
                    i++;
                }
                return true;
            }
        }
        return false;
    }

    /**
     * Compares this string to the specified {@code StringBuffer}.  The result
     * is {@code true} if and only if this {@code String} represents the same
     * sequence of characters as the specified {@code StringBuffer}.
     * 将这个字符串与指定的StringBuffer参数做比较。 只有当指定的StringBuffer参数和这个字符串
	 *代表同样的字符序列是　这个结果才是true。
     * @param  sb
     *         The {@code StringBuffer} to compare this {@code String} against
     * StringBuffer参数 是与 这个字符串 做比较的。 
     * @return  {@code true} if this {@code String} represents the same
     *          sequence of characters as the specified {@code StringBuffer},
     *          {@code false} otherwise
     * 如果指定的StringBuffer参数和这个字符串代表的字符序列是一样的就返回true。 
     * @since  1.4
     */
    public boolean contentEquals(StringBuffer sb) {
        synchronized (sb) {
            return contentEquals((CharSequence) sb);
        }
    }

    /**
     * Compares this string to the specified {@code CharSequence}.  The result
     * is {@code true} if and only if this {@code String} represents the same
     * sequence of char values as the specified sequence.
     * 将这个字符串与指定的CharSequence参数做比较。 只有当指定的序列和这个字符串代表的
	 *是同样的字符值序列是，这个结果才是true。
     * @param  cs
     *         The sequence to compare this {@code String} against
     * 这个cs序列 是与 这个字符串做比较的。 
     * @return  {@code true} if this {@code String} represents the same
     *          sequence of char values as the specified sequence, {@code
     *          false} otherwise
     * 如果指定的序列和这个字符串代表的是同样的字符值序列，就返回ture，否则返回false。 
     * @since  1.5
     */
    public boolean contentEquals(CharSequence cs) {
        if (value.length != cs.length())
            return false;
        // Argument is a StringBuffer, StringBuilder 参数是一个 StringBuffer，StringBuilder
        if (cs instanceof AbstractStringBuilder) {
            char v1[] = value;
            char v2[] = ((AbstractStringBuilder) cs).getValue();
            int i = 0;
            int n = value.length;
            while (n-- != 0) {
                if (v1[i] != v2[i])
                    return false;
                i++;
            }
            return true;
        }
        // Argument is a String  参数是字符串。
        if (cs.equals(this))
            return true;
        // Argument is a generic CharSequence 参数是通用的字符。
        char v1[] = value;
        int i = 0;
        int n = value.length;
        while (n-- != 0) {
            if (v1[i] != cs.charAt(i))
                return false;
            i++;
        }
        return true;
    }

    /**
     * Compares this {@code String} to another {@code String}, ignoring case
     * considerations.  Two strings are considered equal ignoring case if they
     * are of the same length and corresponding characters in the two strings
     * are equal ignoring case.
     * 在忽略大小写的情况，比较这个字符串和另一个字符串。 如果两个字符串是同样的大小写时 ，它们的长度和对应字符一样。
     * <p> Two characters {@code c1} and {@code c2} are considered the same
     * ignoring case if at least one of the following is true:
     * <ul> 当在同样大小写情况下，这两个字符c1和c2 至少会有下面一种情况。 
     *   <li> The two characters are the same (as compared by the
     *        {@code ==} operator) 使用==操作符做比较时，这两个字符串是一样的。 
     *   <li> Applying the method {@link
     *        java.lang.Character#toUpperCase(char)} to each character
     *        produces the same result 应用Character类的toUpperCase方法来对每个字符生成同样的大写结果 。 
     *   <li> Applying the method {@link
     *        java.lang.Character#toLowerCase(char)} to each character
     *        produces the same result  应用Character类的toLowerCase方法来对每个字符生成同样的小写结果 。 
     * </ul>
     *
     * @param  anotherString
     *         The {@code String} to compare this {@code String} against
     *  anoterString参数是与 这个字符串 做 比较用的。 
     * @return  {@code true} if the argument is not {@code null} and it
     *          represents an equivalent {@code String} ignoring case; {@code
     *          false} otherwise
     * 如果这个参数不是空并且他代表了一个忽略大小写的相等字符串，就返回ture。否则返回false。
     * @see  #equals(Object)
     */
    public boolean equalsIgnoreCase(String anotherString) {
        return (this == anotherString) ? true
                : (anotherString != null)
                && (anotherString.value.length == value.length)
                && regionMatches(true, 0, anotherString, 0, value.length);
    }

    /**
     * Compares two strings lexicographically. 比较两个字符串的字母顺序。 
     * The comparison is based on the Unicode value of each character in 在字符串里的每个字符的unicode值的基础上进行比较。 
     * the strings. The character sequence represented by this 
     * <code>String</code> object is compared lexicographically to the
     * character sequence represented by the argument string.
	 *将这个字符串对象代表的字符序列和传过来的字符串参数代表的字符序列按照字典顺序进行比较。 
	 *  The result is a negative integer if this <code>String</code> object
     * lexicographically precedes the argument string. The result is a
     * positive integer if this <code>String</code> object lexicographically
     * follows the argument string. The result is zero if the strings
     * are equal; <code>compareTo</code> returns <code>0</code> exactly when
     * the {@link #equals(Object)} method would return <code>true</code>.
	 * 如果这个字符串对象的字典顺序在 string参数之前，那么这个结果是一个负数整型值。
	 * 如果这个字符串对象的字典书讯在 string参数之后，那么这个结果是一个正的整形数。 
	 * 如果这两个字符串相等，那么这个结果返回的就是0.当调用equals(Object)方法返回ture时，这个compareTo正好返回的是0.
     * <p>
     * This is the definition of lexicographic ordering. If two strings are
     * different, then either they have different characters at some index
     * that is a valid index for both strings, or their lengths are different,
     * or both. If they have different characters at one or more index
     * positions, let <i>k</i> be the smallest such index; then the string
     * whose character at position <i>k</i> has the smaller value, as
     * determined by using the &lt; operator, lexicographically precedes the
     * other string. In this case, <code>compareTo</code> returns the
     * difference of the two character values at position <code>k</code> in
     * the two string -- that is, the value:
	 * 这是一个 定义好的的词典数序。如果两个字符串是不同的，1种情况是：他们在一些下标上有不同的字符，他们的索引都是有效的。
     *  或者他们两者的长度都是不同的。  如果它们有一处以上的索引位置的字符不同，让k 比这样的索引小，
	 * 然后这个字符串的那个字符在 k这个位置有更小的值，就决定使用小于操作符。在其他字符串之前的字典顺序。
	 * 这种情况，compareTo返回的是两个字符串的字符值在位置上的不同。 这个值是:
     * <blockquote><pre>
     * this.charAt(k)-anotherString.charAt(k)
     * </pre></blockquote>
     * If there is no index position at which they differ, then the shorter
     * string lexicographically precedes the longer string. In this case,
     * <code>compareTo</code> returns the difference of the lengths of the
     * strings -- that is, the value:
	 * 他们中有不同的时，这就没有下标位置。然后这个长字符串会按词典顺序变短。这种情况时,
	 * compareTo 方法返回的是两个字符串中不同的长度。  它的值是: 
     * <blockquote><pre>
     * this.length()-anotherString.length()
     * </pre></blockquote>
     *
     * @param   anotherString   the <code>String</code> to be compared. 参与比较的另一个字符串。 
     * @return  the value <code>0</code> if the argument string is equal to
     *          this string; a value less than <code>0</code> if this string
     *          is lexicographically less than the string argument; and a
     *          value greater than <code>0</code> if this string is
     *          lexicographically greater than the string argument.
     * 如果传递过来的anotherString参数与这个字符串相等，那么返回值是0.
	 * 如果这个字符串的词典顺序小于传递过来的anotherString参数，那么返回值小于0.
	 * 如果这个字符串的词典顺序大于传递过来的anotherString参数，那么返回值大于0.
	 */ 
    public int compareTo(String anotherString) {
        int len1 = value.length;
        int len2 = anotherString.value.length;
        int lim = Math.min(len1, len2);
        char v1[] = value;
        char v2[] = anotherString.value;

        int k = 0;
        while (k < lim) {
            char c1 = v1[k];
            char c2 = v2[k];
            if (c1 != c2) {
                return c1 - c2;
            }
            k++;
        }
        return len1 - len2;
    }

    /**
     * A Comparator that orders <code>String</code> objects as by
     * <code>compareToIgnoreCase</code>. This comparator is serializable.
     * <p>
	 *  一个 通过compareToIgnoreCase方法的字符串对象比较器。这个比较器是可序列化的。
     * Note that this Comparator does <em>not</em> take locale into account,
     * and will result in an unsatisfactory ordering for certain locales.
     * The java.text package provides <em>Collators</em> to allow
     * locale-sensitive ordering. 
     * 注意，这个比较器不考虑 语言环境，并且将导致某些 情况 令人不满意的排序。
	 * java.text包里提供了 Collactors类对 某些情况写敏感的排序 。
	 * @see     java.text.Collator#compare(String, String)  
     * @since   1.2
     */
    public static final Comparator<String> CASE_INSENSITIVE_ORDER
                                         = new CaseInsensitiveComparator();
    private static class CaseInsensitiveComparator
            implements Comparator<String>, java.io.Serializable {
        // use serialVersionUID from JDK 1.2.2 for interoperability
		//使用序列版本Uid 使其兼容 JDK1.2.2 
        private static final long serialVersionUID = 8575799808933029326L;

        public int compare(String s1, String s2) {
            int n1 = s1.length();
            int n2 = s2.length();
            int min = Math.min(n1, n2);
            for (int i = 0; i < min; i++) {
                char c1 = s1.charAt(i);
                char c2 = s2.charAt(i);
                if (c1 != c2) {
                    c1 = Character.toUpperCase(c1);
                    c2 = Character.toUpperCase(c2);
                    if (c1 != c2) {
                        c1 = Character.toLowerCase(c1);
                        c2 = Character.toLowerCase(c2);
                        if (c1 != c2) {
                            // No overflow because of numeric promotion  没有数字提升的 溢出
                            return c1 - c2; //如果两个字符串中的某个字符在同等大小写情况下不相等，就 返回他们的ASCII差值
                        }
                    }
                }
            }
            return n1 - n2;  //如果两个字符串的长度不等，但前面的字符完全相等，就返回 两个字符串的长度差值 ，
        }
    }

    /**
     * Compares two strings lexicographically, ignoring case
     * differences. This method returns an integer whose sign is that of
     * calling <code>compareTo</code> with normalized versions of the strings
     * where case differences have been eliminated by calling
     * <code>Character.toLowerCase(Character.toUpperCase(character))</code> on
     * each character.
     * <p>  在忽略大小写不同时 ，比较两个字符串的字母顺序 。  通过调用Character类的方法将每个字符转换成大小在转换成小写，来消除 字母大小写不同的情况
	 * 用字符串的标准版本调用compareTo方法，这个方法返回一个整形值。
     * Note that this method does <em>not</em> take locale into account,
     * and will result in an unsatisfactory ordering for certain locales.
     * The java.text package provides <em>collators</em> to allow
     * locale-sensitive ordering.
     * 注意，这个方法在某些场合下不适用，并且将导致 某些情况下令人不满意的结果。java.text包里提供了colators类为 那些敏感的场合排序。
     * @param   str   the <code>String</code> to be compared. 被比较的字符串参数。
     * @return  a negative integer, zero, or a positive integer as the 返回一个负值，0，或一个正数，在制定字符串大于，等于，或小于这个字符串时， 
     *          specified String is greater than, equal to, or less
     *          than this String, ignoring case considerations.   不考虑大小写的情况。 
     * @see     java.text.Collator#compare(String, String)
     * @since   1.2
     */
    public int compareToIgnoreCase(String str) {
        return CASE_INSENSITIVE_ORDER.compare(this, str);
    }

    /**
     * Tests if two string regions are equal. 测试两个字符串中的一段区域是否相等。
     * <p>
     * A substring of this <tt>String</tt> object is compared to a substring 这个字符串对象的一个子串与其他参数的子串进行比较。
     * of the argument other. The result is true if these substrings 如果这两个子串代表的完全相同的自序序列，就返回true。
     * represent identical character sequences. The substring of this
     * <tt>String</tt> object to be compared begins at index <tt>toffset</tt> 这个字符串对象的子串从下标toffset出开始进行比较，比较的长度是len参数。
     * and has length <tt>len</tt>. The substring of other to be compared 其他字符串参数的子串从下标ooffset处进行比较，比较的长度也是len参数。
     * begins at index <tt>ooffset</tt> and has length <tt>len</tt>. The 结果是false
     * result is <tt>false</tt> if and only if at least one of the following 下面至少有一种情况下是true。
     * is true:
     * <ul><li><tt>toffset</tt> is negative.  toffset参数是负的。
     * <li><tt>ooffset</tt> is negative.  ooffset参数是负的。
     * <li><tt>toffset+len</tt> is greater than the length of this
     * <tt>String</tt> object. 这个字符串的偏移位置+比较的长度 大于 这个字符串对象的长度 。
     * <li><tt>ooffset+len</tt> is greater than the length of the other
     * argument. 其他字符串的偏移位置+比较的长度 大于 另外一个参数的长度。
     * <li>There is some nonnegative integer <i>k</i> less than <tt>len</tt>
     * such that: 这是一些非负整数 ，当k小于len时是这样的：
     * <tt>this.charAt(toffset+<i>k</i>)&nbsp;!=&nbsp;other.charAt(ooffset+<i>k</i>)</tt>
     * </ul>
     *
     * @param   toffset   the starting offset of the subregion in this string. 这个字符串里的子区域的开始偏移位置。
     * @param   other     the string argument.  另外一个字符串参数。
     * @param   ooffset   the starting offset of the subregion in the string
     *                    argument. 另外一个字符串参数的子区域的开始偏移位置。
     * @param   len       the number of characters to compare. 比较的字符的 长度数。
     * @return  <code>true</code> if the specified subregion of this string
     *          exactly matches the specified subregion of the string argument; 如果这个字符串指定的子区域正好与另外一个字符串参数的指定子区域相匹配就返回true。
     *          <code>false</code> otherwise. 其他情况下返回false。
     */
    public boolean regionMatches(int toffset, String other, int ooffset,
            int len) {
        char ta[] = value;
        int to = toffset;
        char pa[] = other.value;
        int po = ooffset;
        // Note: toffset, ooffset, or len might be near -1>>>1. 注意toffset，ooffset，或长度可能在-1到1之间。
        if ((ooffset < 0) || (toffset < 0)
                || (toffset > (long)value.length - len)
                || (ooffset > (long)other.value.length - len)) {
            return false;
        }
        while (len-- > 0) {
            if (ta[to++] != pa[po++]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Tests if two string regions are equal. 比较两个字符串的区域是否相等。
     * <p> 这个参数和上面的参数功能基本相同，只是加入了一个是否忽略大小写的boolean参数。
     * A substring of this <tt>String</tt> object is compared to a substring
     * of the argument <tt>other</tt>. The result is <tt>true</tt> if these
     * substrings represent character sequences that are the same, ignoring
     * case if and only if <tt>ignoreCase</tt> is true. The substring of
     * this <tt>String</tt> object to be compared begins at index
     * <tt>toffset</tt> and has length <tt>len</tt>. The substring of
     * <tt>other</tt> to be compared begins at index <tt>ooffset</tt> and
     * has length <tt>len</tt>. The result is <tt>false</tt> if and only if
     * at least one of the following is true:
     * <ul><li><tt>toffset</tt> is negative.
     * <li><tt>ooffset</tt> is negative.
     * <li><tt>toffset+len</tt> is greater than the length of this
     * <tt>String</tt> object.
     * <li><tt>ooffset+len</tt> is greater than the length of the other
     * argument.
     * <li><tt>ignoreCase</tt> is <tt>false</tt> and there is some nonnegative
     * integer <i>k</i> less than <tt>len</tt> such that:
     * <blockquote><pre>
     * this.charAt(toffset+k) != other.charAt(ooffset+k)
     * </pre></blockquote>
     * <li><tt>ignoreCase</tt> is <tt>true</tt> and there is some nonnegative
     * integer <i>k</i> less than <tt>len</tt> such that:
     * <blockquote><pre>
     * Character.toLowerCase(this.charAt(toffset+k)) !=
     Character.toLowerCase(other.charAt(ooffset+k))
     * </pre></blockquote>
     * and:
     * <blockquote><pre>
     * Character.toUpperCase(this.charAt(toffset+k)) !=
     *         Character.toUpperCase(other.charAt(ooffset+k))
     * </pre></blockquote>
     * </ul>
     *
     * @param   ignoreCase   if <code>true</code>, ignore case when comparing
     *                       characters. 如果为true，就在忽略大小写的情况下比较字符。
     * @param   toffset      the starting offset of the subregion in this
     *                       string.
     * @param   other        the string argument.
     * @param   ooffset      the starting offset of the subregion in the string
     *                       argument.
     * @param   len          the number of characters to compare.
     * @return  <code>true</code> if the specified subregion of this string
     *          matches the specified subregion of the string argument;
     *          <code>false</code> otherwise. Whether the matching is exact
     *          or case insensitive depends on the <code>ignoreCase</code>
     *          argument. 如果这个字符串的指定子区域与另外一个字符串参数的指定子区域相匹配，就返回 true。其他情况返回false。不管匹配是准确的或，忽略大小写依赖的是ignoreCase参数。
     */
    public boolean regionMatches(boolean ignoreCase, int toffset,
            String other, int ooffset, int len) {
        char ta[] = value;
        int to = toffset;
        char pa[] = other.value;
        int po = ooffset;
        // Note: toffset, ooffset, or len might be near -1>>>1.
        if ((ooffset < 0) || (toffset < 0)
                || (toffset > (long)value.length - len)
                || (ooffset > (long)other.value.length - len)) {
            return false;
        }
        while (len-- > 0) {
            char c1 = ta[to++];
            char c2 = pa[po++];
            if (c1 == c2) {
                continue;
            }
            if (ignoreCase) {
                // If characters don't match but case may be ignored, 如果字符不匹配，但是 大小写可以被忽略。
                // try converting both characters to uppercase. 尝试将两个字符都转换为大写。 
                // If the results match, then the comparison scan should  如果结果匹配，就扫描后续的字符继续进行比较 。
                // continue.
                char u1 = Character.toUpperCase(c1);
                char u2 = Character.toUpperCase(c2);
                if (u1 == u2) {
                    continue;
                }
                // Unfortunately, conversion to uppercase does not work properly
                // for the Georgian alphabet, which has strange rules about case
                // conversion.  So we need to make one last check before
                // exiting. 遗憾的是，大写的比较不能正确的在 格鲁吉亚字母 时工作，有一些关于大小写转换的奇怪的规则。所以我们需要在退出前做最后一次检测。 
                if (Character.toLowerCase(u1) == Character.toLowerCase(u2)) {
                    continue;
                }
            }
            return false;
        }
        return true;
    }

    /**
     * Tests if the substring of this string beginning at the
     * specified index starts with the specified prefix.
     * 测试这个字符串从指定下标处，是否以指定的这个前缀字符串开始。
     * @param   prefix    the prefix. 前缀字符串
     * @param   toffset   where to begin looking in this string. 从哪开始查看这个字符串。
     * @return  <code>true</code> if the character sequence represented by the 如果这个字符序列代表的参数是这个对象以toffset下标处开始的子串的前缀就返回true。
     *          argument is a prefix of the substring of this object starting
     *          at index <code>toffset</code>; <code>false</code> otherwise.  其他情况返回false。
     *          The result is <code>false</code> if <code>toffset</code> is
     *          negative or greater than the length of this 如果toffset是负数或者大于这个字符串对象的长度，那么这个结果就是false。其他情况下这个结果和表达式的结果一致。
     *          <code>String</code> object; otherwise the result is the same
     *          as the result of the expression
     *          <pre>
     *          this.substring(toffset).startsWith(prefix)
     *          </pre>
     */
    public boolean startsWith(String prefix, int toffset) {
        char ta[] = value;
        int to = toffset;
        char pa[] = prefix.value;
        int po = 0;
        int pc = prefix.value.length;
        // Note: toffset might be near -1>>>1. 注意，this字符串的偏移位置可能在-1到1之间。
        if ((toffset < 0) || (toffset > value.length - pc)) {
            return false;
        }
        while (--pc >= 0) {
            if (ta[to++] != pa[po++]) {
                return false;
            }
        }
        return true;
    }

    /**
     * Tests if this string starts with the specified prefix. 测试this字符串是否以指定的前缀字符串开始。
     *
     * @param   prefix   the prefix. 前缀字符串。 
     * @return  <code>true</code> if the character sequence represented by the
     *          argument is a prefix of the character sequence represented by
     *          this string; <code>false</code> otherwise. 如果这个前缀字符串参数的字符序列代表的与 this字符串代表的字符序列一样就返回ture。其他情况false。
     *          Note also that <code>true</code> will be returned if the  注意如果这个参数是一个空串或与通过equals方法判断与this字符串相等，那么也会返回true。
     *          argument is an empty string or is equal to this
     *          <code>String</code> object as determined by the
     *          {@link #equals(Object)} method.
     * @since   1. 0
     */
    public boolean startsWith(String prefix) {
        return startsWith(prefix, 0);
    }

    /**
     * Tests if this string ends with the specified suffix. 
     * 测试this字符串是否以指定的后缀字符串结尾。
     * @param   suffix   the suffix. 后缀字符串参数。
     * @return  <code>true</code> if the character sequence represented by the 
     *          argument is a suffix of the character sequence represented by 如果这个参数代表的字符序列是  this对象代表的字符序列的一个后缀串，就返回true。
     *          this object; <code>false</code> otherwise. Note that the 其他情况返回false 。注意，如果参数是空字符串或通过equals（Object）方法判断与this字符串对象相等也会返回true。
     *          result will be <code>true</code> if the argument is the
     *          empty string or is equal to this <code>String</code> object
     *          as determined by the {@link #equals(Object)} method.
     */
    public boolean endsWith(String suffix) {
        return startsWith(suffix, value.length - suffix.value.length);
    }

    /**
     * Returns a hash code for this string. The hash code for a
     * <code>String</code> object is computed as
     * <blockquote><pre> 为this字符串返回一个哈希码。这个哈希码是是通过下面这个表达式的  算法计算出来的。 
     * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
     * </pre></blockquote>
     * using <code>int</code> arithmetic, where <code>s[i]</code> is the
     * <i>i</i>th character of the string, <code>n</code> is the length of
     * the string, and <code>^</code> indicates exponentiation.   s【i】是字符串中的字符index，n是字符串的长度。 ^符号表示 取幂。
     * (The hash value of the empty string is zero.)
     * 空字符串的哈希值 是0.
     * @return  a hash code value for this object. 为字符串对象返回一个 哈希码值
     */
    public int hashCode() {
        int h = hash;
        if (h == 0 && value.length > 0) {
            char val[] = value;

            for (int i = 0; i < value.length; i++) {
                h = 31 * h + val[i];
            }
            hash = h;
        }
        return h;
    }

    /**
     * Returns the index within this string of the first occurrence of  返回这个字符串里面的指定字符 第一次出现的下标。
     * the specified character. If a character with value  如果一个字符ch的值出现在this字符串对象代表的字符序列里，
     * <code>ch</code> occurs in the character sequence represented by   
     * this <code>String</code> object, then the index (in Unicode  那么就返回这样的第一个下标出现的位置。 
     * code units) of the first such occurrence is returned. For   取值范围从0~0xFFFF(包含),这是最小的值 。如下所示:
     * values of <code>ch</code> in the range from 0 to 0xFFFF
     * (inclusive), this is the smallest value <i>k</i> such that:
     * <blockquote><pre>
     * this.charAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. For other values of <code>ch</code>, it is the
     * smallest value <i>k</i> such that:
     * <blockquote><pre>
     * this.codePointAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this  无论哪种情况发生， 如果没有这样的字符出现在this字符串里，那么就返回-1.
     * string, then <code>-1</code> is returned.
     *
     * @param   ch   a character (Unicode code point).  参数ch是一个指向unicode码里的字符。
     * @return  the index of the first occurrence of the character in the  返回this对象代表的字符序列里的字符 第一次出现的下标位置。
     *          character sequence represented by this object, or 如果没有这个字符没有出现返回-1.
     *          <code>-1</code> if the character does not occur.
     */
    public int indexOf(int ch) {
        return indexOf(ch, 0);
    }

    /**
     * Returns the index within this string of the first occurrence of the
     * specified character, starting the search at the specified index.
     * <p>  返回指定字符 在this字符串里第一次出现的下标位置。从指定index处开始查找。
     * If a character with value <code>ch</code> occurs in the
     * character sequence represented by this <code>String</code> 如果一个字符的值在this字符串对象代表的字符序列中出现的index 并不比fromIndex更小，
     * object at an index no smaller than <code>fromIndex</code>, then
     * the index of the first such occurrence is returned. For values 那么就返回第一次出现这样的下标位置。取值范围从0~0xFFFF(包含),
     * of <code>ch</code> in the range from 0 to 0xFFFF (inclusive),
     * this is the smallest value <i>k</i> such that: 最小的值是这样的:
     * <blockquote><pre>
     * (this.charAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)
     * </pre></blockquote>
     * is true. For other values of <code>ch</code>, it is the
     * smallest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this  无论哪种情况出现，如果没有这样的字符出现在this字符串里 或fromIndex位置之后，那么就返回-1.
     * string at or after position <code>fromIndex</code>, then
     * <code>-1</code> is returned.
     *
     * <p>
     * There is no restriction on the value of <code>fromIndex</code>. If it 这的fromIndex的值没有约束限制。如果它是负数，在这里它和0是同样的效果：
     * is negative, it has the same effect as if it were zero: this entire  这整个字符串可以被搜索。
     * string may be searched. If it is greater than the length of this 如果它大于this字符串的长度，那么它和this字符串的长度是相同的结果:
     * string, it has the same effect as if it were equal to the length of 
     * this string: <code>-1</code> is returned.   返回-1.
     *
     * <p>All indices are specified in <code>char</code> values  所有char值里的指定的索引。
     * (Unicode code units).
     *
     * @param   ch          a character (Unicode code point).
     * @param   fromIndex   the index to start the search from.  从fromIndex下标处开始搜索。
     * @return  the index of the first occurrence of the character in the         返回 这个对象代表的字符序列里的第一次出现的字符的下标 大于或等于fromIndex，
     *          character sequence represented by this object that is greater
     *          than or equal to <code>fromIndex</code>, or <code>-1</code>   如果这个字符没有出现就返回-1.
     *          if the character does not occur.
     */
    public int indexOf(int ch, int fromIndex) {
        final int max = value.length;
        if (fromIndex < 0) {
            fromIndex = 0;
        } else if (fromIndex >= max) {
            // Note: fromIndex might be near -1>>>1.  注意：fromIndex可能接近-1~   1.
            return -1;
        }

        if (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
            // handle most cases here (ch is a BMP code point or a 在这处理更多中情况。(ch是一个BMP点指向 或一个负值。(无效指向。))
            // negative value (invalid code point))
            final char[] value = this.value;
            for (int i = fromIndex; i < max; i++) {
                if (value[i] == ch) {
                    return i;
                }
            }
            return -1;
        } else {
            return indexOfSupplementary(ch, fromIndex);
        }
    }

    /**
     * Handles (rare) calls of indexOf with a supplementary character. 处理一个追加字符的下标调用
     */
    private int indexOfSupplementary(int ch, int fromIndex) {
        if (Character.isValidCodePoint(ch)) {
            final char[] value = this.value;
            final char hi = Character.highSurrogate(ch);
            final char lo = Character.lowSurrogate(ch);
            final int max = value.length - 1;
            for (int i = fromIndex; i < max; i++) {
                if (value[i] == hi && value[i + 1] == lo) {
                    return i;
                }
            }
        }
        return -1;
    }

    /**
     * Returns the index within this string of the last occurrence of  返回this字符串里面  指定字符最后出现的下标位置。
     * the specified character. For values of <code>ch</code> in the
     * range from 0 to 0xFFFF (inclusive), the index (in Unicode code  取值范围从0~0xFFFF(包含),
     * units) returned is the largest value <i>k</i> such that: 这个下标(Unicode 字符集里) 返回的是这样的最大值。
     * <blockquote><pre>
     * this.charAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true. For other values of <code>ch</code>, it is the
     * largest value <i>k</i> such that:
     * <blockquote><pre>
     * this.codePointAt(<i>k</i>) == ch
     * </pre></blockquote>
     * is true.  In either case, if no such character occurs in this  其他情况发生时，如果没有这样的字符出现在this字符串里，那么返回-1.
     * string, then <code>-1</code> is returned.  The
     * <code>String</code> is searched backwards starting at the last 
     * character. 这个字符串开始向后搜索直到 最后一个字符。
     *
     * @param   ch   a character (Unicode code point). 
     * @return  the index of the last occurrence of the character in the
     *          character sequence represented by this object, or 返回this对象代表的字符序列里的指定字符 最后一次出现的下标位置。
     *          <code>-1</code> if the character does not occur. 或 如果没有出现指定字符，就返回-1.
     */
    public int lastIndexOf(int ch) {
        return lastIndexOf(ch, value.length - 1);
    }

    /**
     * Returns the index within this string of the last occurrence of  返回this字符串里 指定字符最后一次出现的索引位置。
     * the specified character, searching backward starting at the   从指定的下标位置处开始向后搜索。
     * specified index. For values of <code>ch</code> in the range   取值范围从0~0xFFFF(包含),返回的下标位置 时向这样的最大值:
     * from 0 to 0xFFFF (inclusive), the index returned is the largest
     * value <i>k</i> such that:
     * <blockquote><pre>
     * (this.charAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)
     * </pre></blockquote>
     * is true. For other values of <code>ch</code>, it is the
     * largest value <i>k</i> such that:
     * <blockquote><pre>
     * (this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &lt;= fromIndex)
     * </pre></blockquote>
     * is true. In either case, if no such character occurs in this  其他情况时，如果在this字符串里没有出现这样的字符 或 在fromIndex位置之前，
     * string at or before position <code>fromIndex</code>, then   那么就返回-1.
     * <code>-1</code> is returned.
     *
     * <p>All indices are specified in <code>char</code> values  所有指定字符值的索引。
     * (Unicode code units).
     *
     * @param   ch          a character (Unicode code point).
     * @param   fromIndex   the index to start the search from. There is no 从fromIndex处开始搜索。
     *          restriction on the value of <code>fromIndex</code>. If it is 这个fromIndex 是没有限制的。
     *          greater than or equal to the length of this string, it has  如果它大于等于this字符串的长度，
     *          the same effect as if it were equal to one less than the  它是和一个小于this字符串长度的效果是一样的。
     *          length of this string: this entire string may be searched.  这整个字符串可以被搜索。
     *          If it is negative, it has the same effect as if it were -1:  如果它是负数，那么它和-1是一样的效果。
     *          -1 is returned.  返回-1.
     * @return  the index of the last occurrence of the character in the 返回  this对象代表的字符序列里 那个字符最后一次出现的下标位置 是 小于或等于 fromIndex，
     *          character sequence represented by this object that is less
     *          than or equal to <code>fromIndex</code>, or <code>-1</code>   如果那个字符在 那个点的指向之前没有出现，就返回-1.
     *          if the character does not occur before that point.
     */
    public int lastIndexOf(int ch, int fromIndex) {
        if (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT) {
            // handle most cases here (ch is a BMP code point or a  处理更多的情况。(ch 是一个BMP码点 或一个负值(无效码点))
            // negative value (invalid code point))
            final char[] value = this.value;
            int i = Math.min(fromIndex, value.length - 1);
            for (; i >= 0; i--) {
                if (value[i] == ch) {
                    return i;
                }
            }
            return -1;
        } else {
            return lastIndexOfSupplementary(ch, fromIndex);
        }
    }

    /**
     * Handles (rare) calls of lastIndexOf with a supplementary character.  处理(稀有的) 追加字符的最后一个索引的下标调用。 
     */
    private int lastIndexOfSupplementary(int ch, int fromIndex) {
        if (Character.isValidCodePoint(ch)) {
            final char[] value = this.value;
            char hi = Character.highSurrogate(ch);
            char lo = Character.lowSurrogate(ch);
            int i = Math.min(fromIndex, value.length - 2);
            for (; i >= 0; i--) {
                if (value[i] == hi && value[i + 1] == lo) {
                    return i;
                }
            }
        }
        return -1;
    }

    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring.  返回this字符串里 指定子串 第一次出现的下标位置。
     *
     * <p>The returned index is the smallest value <i>k</i> for which: 这个返回的index 对于哪些 是一个最小的值:
     * <blockquote><pre>
     * this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     * 如果没有这样的值存在就返回-1.
     * @param   str   the substring to search for. 待搜索的的子串。
     * @return  the index of the first occurrence of the specified substring, 返回  指定子串 第一次出现的下标位置。
     *          or {@code -1} if there is no such occurrence.  如果这没有出现这样的 就返回-1.
     */
    public int indexOf(String str) {
        return indexOf(str, 0);
    }

    /**
     * Returns the index within this string of the first occurrence of the
     * specified substring, starting at the specified index. 返回this字符串里的指定子串 第一次出现的下标位置。 从指定索引处开始查找。
     *
     * <p>The returned index is the smallest value <i>k</i> for which:
     * <blockquote><pre>  返回的索引是 对于哪些 是最小值:
     * <i>k</i> &gt;= fromIndex && this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     * 如果没有这样的值存在，那么就返回-1.
     * @param   str         the substring to search for.   待搜索的子串。
     * @param   fromIndex   the index from which to start the search. 从fromIndex处开始搜索。
     * @return  the index of the first occurrence of the specified substring,  返回指定子串第一次出现的位置,从指定索引处开始。
     *          starting at the specified index, 
     *          or {@code -1} if there is no such occurrence. 如果这没有出现这样的子串就返回-1.
     */
    public int indexOf(String str, int fromIndex) {
        return indexOf(value, 0, value.length,
                str.value, 0, str.value.length, fromIndex);
    }

    /**
     * Code shared by String and StringBuffer to do searches. The      字符串类和StringBuffer类检索 共享的代码。
     * source is the character array being searched, and the target  这source是以字符数组开始搜索。target是要搜索的字符串。
     * is the string being searched for.
     *
     * @param   source       the characters being searched.  现有的 搜索字符串。
     * @param   sourceOffset offset of the source string.  源字符串的偏移位置。
     * @param   sourceCount  count of the source string. 源字符串的字符数。
     * @param   target       the characters being searched for. 要被搜索的字符串。
     * @param   targetOffset offset of the target string.  目标字符串的偏移位置。
     * @param   targetCount  count of the target string.  目标字符串的字符数。
     * @param   fromIndex    the index to begin searching from.   从fromIndex处开始搜索。
     */
    static int indexOf(char[] source, int sourceOffset, int sourceCount,
            char[] target, int targetOffset, int targetCount,
            int fromIndex) {
        if (fromIndex >= sourceCount) {
            return (targetCount == 0 ? sourceCount : -1);
        }
        if (fromIndex < 0) {
            fromIndex = 0;
        }
        if (targetCount == 0) {
            return fromIndex;
        }

        char first = target[targetOffset];
        int max = sourceOffset + (sourceCount - targetCount);

        for (int i = sourceOffset + fromIndex; i <= max; i++) {
            /* Look for first character.    查看第一个字符 */
            if (source[i] != first) {
                while (++i <= max && source[i] != first);
            }

            /* Found first character, now look at the rest of v2  找到第一个字符，现在查看v2的其余部分。 */
            if (i <= max) {
                int j = i + 1;
                int end = j + targetCount - 1;
                for (int k = targetOffset + 1; j < end && source[j]
                        == target[k]; j++, k++);

                if (j == end) {
                    /* Found whole string.  查找完整的字符串 */
                    return i - sourceOffset;
                }
            }
        }
        return -1;
    }

    /**
     * Returns the index within this string of the last occurrence of the  返回指定子串在this字符串里最后一次出现的下标位置。
     * specified substring.  The last occurrence of the empty string ""
     * is considered to occur at the index value {@code this.length()}. 最后出现的空串 的位置 被认为是this字符串的长度值。
     *
     * <p>The returned index is the largest value <i>k</i> for which: 这种情况 返回最大的值:
     * <blockquote><pre>
     * this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     * 如果这样的值不存在，那么返回-1.
     * @param   str   the substring to search for.  待搜索的的字串。
     * @return  the index of the last occurrence of the specified substring, 返回指定子串最后一次出现的索引，
     *          or {@code -1} if there is no such occurrence.  或没有出现这样的子串 就返回-1.
     */
    public int lastIndexOf(String str) {
        return lastIndexOf(str, value.length);
    }

    /**
     * Returns the index within this string of the last occurrence of the
     * specified substring, searching backward starting at the specified index.
     * 返回 指定子串 在this字符串中最后一次出现的下标位置。 从指定索引处开始向后搜索。 
     * <p>The returned index is the largest value <i>k</i> for which: 这种情况返回的索引是最大的值:
     * <blockquote><pre>
     * <i>k</i> &lt;= fromIndex && this.startsWith(str, <i>k</i>)
     * </pre></blockquote>
     * If no such value of <i>k</i> exists, then {@code -1} is returned.
     * 如果这样的值不存在，那么就返回-1.
     * @param   str         the substring to search for.  待搜索的子串。 
     * @param   fromIndex   the index to start the search from. 从fromIndex处开始搜索。
     * @return  the index of the last occurrence of the specified substring, 返回指定子串最后一次出现的索引下标，
     *          searching backward from the specified index,   从指定索引处向后搜索。 
     *          or {@code -1} if there is no such occurrence.  如果没有出现这样的子串就返回-1.
     */
    public int lastIndexOf(String str, int fromIndex) {
        return lastIndexOf(value, 0, value.length,
                str.value, 0, str.value.length, fromIndex);
    }

    /**
     * Code shared by String and StringBuffer to do searches. The 这个查找方法是 String类和StringBuffer类共享的。
     * source is the character array being searched, and the target 这个source是开始搜索的源字节数组。 这target是被开始搜索的目标字节数组。 
     * is the string being searched for.
     *
     * @param   source       the characters being searched.  开始搜索的源字符串。 
     * @param   sourceOffset offset of the source string. 源字符串的偏移位置。 
     * @param   sourceCount  count of the source string.  源字符串的字符数。 
     * @param   target       the characters being searched for.  开始搜索的目标字符串。
     * @param   targetOffset offset of the target string.  目标字符串的偏移位置。 
     * @param   targetCount  count of the target string.  目标字符串的字节数。 
     * @param   fromIndex    the index to begin searching from.  从fromIndex下标处开始搜索。 
     */
    static int lastIndexOf(char[] source, int sourceOffset, int sourceCount,
            char[] target, int targetOffset, int targetCount,
            int fromIndex) {
        /*
         * Check arguments; return immediately where possible. For  
         * consistency, don't check for null str. 检测参数的一致性，可能立即就会返回， 不检查null字符串。 
         */
        int rightIndex = sourceCount - targetCount;
        if (fromIndex < 0) {
            return -1;
        }
        if (fromIndex > rightIndex) {
            fromIndex = rightIndex;
        }
        /* Empty string always matches.   总是匹配空字符串*/
        if (targetCount == 0) {
            return fromIndex;
        }

        int strLastIndex = targetOffset + targetCount - 1;
        char strLastChar = target[strLastIndex];
        int min = sourceOffset + targetCount - 1;
        int i = min + fromIndex;

        startSearchForLastChar:
        while (true) {
            while (i >= min && source[i] != strLastChar) {
                i--;
            }
            if (i < min) {
                return -1;
            }
            int j = i - 1;
            int start = j - (targetCount - 1);
            int k = strLastIndex - 1;

            while (j > start) {
                if (source[j--] != target[k--]) {
                    i--;
                    continue startSearchForLastChar;
                }
            }
            return start - sourceOffset + 1;
        }
    }

    /**
     * Returns a new string that is a substring of this string. The 返回this字符串的一个子串，它是一个全新的字符串。 
     * substring begins with the character at the specified index and
     * extends to the end of this string. <p>  从this字符串 指定索引处的字符开始 截取，直到this字符串的结束。
     * Examples: 例如：
     * <blockquote><pre>
     * "unhappy".substring(2) returns "happy"
     * "Harbison".substring(3) returns "bison"
     * "emptiness".substring(9) returns "" (an empty string)
     * </pre></blockquote>
     *
     * @param      beginIndex   the beginning index, inclusive.  从beginning（包含）索引处开始截取，
     * @return     the specified substring.  返回指定的子串。 
     * @exception  IndexOutOfBoundsException  if 如果beginIdex是负数或它比this字符串对象的长度大，那么就抛出 下标越界异常。 
     *             <code>beginIndex</code> is negative or larger than the
     *             length of this <code>String</code> object.
     */
    public String substring(int beginIndex) {
        if (beginIndex < 0) {
            throw new StringIndexOutOfBoundsException(beginIndex);
        }
        int subLen = value.length - beginIndex;
        if (subLen < 0) {
            throw new StringIndexOutOfBoundsException(subLen);
        }
        return (beginIndex == 0) ? this : new String(value, beginIndex, subLen);
    }

    /**
     * Returns a new string that is a substring of this string. The 返回this字符串的一个字串，它是一个全新的字符串。 
     * substring begins at the specified <code>beginIndex</code> and 从指定的beginIndex处开始截取，直到endIndex-1索引处的字符结束。 
     * extends to the character at index <code>endIndex - 1</code>.
     * Thus the length of the substring is <code>endIndex-beginIndex</code>. 因此这个子串的长度是endIndex-beginIndex。
     * <p>
     * Examples: 例如:
     * <blockquote><pre>
     * "hamburger".substring(4, 8) returns "urge"
     * "smiles".substring(1, 5) returns "mile"
     * </pre></blockquote>
     *
     * @param      beginIndex   the beginning index, inclusive.  从beginIndex(包含)下标处开始截取。
     * @param      endIndex     the ending index, exclusive.  截取到endIndex下标处 结束。 (不包含endIndex下标)
     * @return     the specified substring.
     * @exception  IndexOutOfBoundsException  if the 如果beginIndex是负数 ，或endIndex大于this字符串对象的长度，或beginIndex大于endIndex。那么就抛出下标越界异常。 
     *             <code>beginIndex</code> is negative, or
     *             <code>endIndex</code> is larger than the length of
     *             this <code>String</code> object, or
     *             <code>beginIndex</code> is larger than
     *             <code>endIndex</code>.
     */
    public String substring(int beginIndex, int endIndex) {
        if (beginIndex < 0) {
            throw new StringIndexOutOfBoundsException(beginIndex);
        }
        if (endIndex > value.length) {
            throw new StringIndexOutOfBoundsException(endIndex);
        }
        int subLen = endIndex - beginIndex;
        if (subLen < 0) {
            throw new StringIndexOutOfBoundsException(subLen);
        }
        return ((beginIndex == 0) && (endIndex == value.length)) ? this
                : new String(value, beginIndex, subLen);
    }

    /**
     * Returns a new character sequence that is a subsequence of this sequence.
     * 返回 this序列的一个子序列。 它是一个全新的序列。 
     * <p> An invocation of this method of the form
     *  这个方法是以下面这种形式调用的。 
     * <blockquote><pre>
     * str.subSequence(begin,&nbsp;end)</pre></blockquote>
     *
     * behaves in exactly the same way as the invocation
     * 这个行为正好和下面这种调用的方式 是一样的。 
     * <blockquote><pre>
     * str.substring(begin,&nbsp;end)</pre></blockquote>
     * 这个方法的定义 是为了方便 String类能够实现CharSquence接口。 
     * This method is defined so that the <tt>String</tt> class can implement
     * the {@link CharSequence} interface. </p>
     *
     * @param      beginIndex   the begin index, inclusive. 从beginIndex(包含)处开始截取，
     * @param      endIndex     the end index, exclusive. 直到endIndex(不包含)处结束。 
     * @return     the specified subsequence.  返回 指定的子序列。 
     *
     * @throws  IndexOutOfBoundsException 
     *          if <tt>beginIndex</tt> or <tt>endIndex</tt> are negative,
     *          if <tt>endIndex</tt> is greater than <tt>length()</tt>,
     *          or if <tt>beginIndex</tt> is greater than <tt>startIndex</tt>
     * 如果beginIndex或endIndex是负数， 如果endIndex大于this字符串的长度，或如果beginIndex大于startIndex  那么就抛出下标越界异常。 
     * @since 1.4
     * @spec JSR-51
     */
    public CharSequence subSequence(int beginIndex, int endIndex) {
        return this.substring(beginIndex, endIndex);
    }

    /**
     * Concatenates the specified string to the end of this string.  连接指定的字符串到this字符串的尾部。 
     * <p>
     * If the length of the argument string is <code>0</code>, then this  如果参数字符串的长度是0，那么就直接返回this字符串对象。 
     * <code>String</code> object is returned. Otherwise, a new  
     * <code>String</code> object is created, representing a character  其他情况，创建一个新的字符串对象，代表了一个 字符序列，
     * sequence that is the concatenation of the character sequence   这个字符序列是 this字符串对象代表的字符序列 连接 参数字符串代表的字符序列。
     * represented by this <code>String</code> object and the character
     * sequence represented by the argument string.<p>
     * Examples:  例如。 
     * <blockquote><pre>
     * "cares".concat("s") returns "caress"
     * "to".concat("get").concat("her") returns "together"
     * </pre></blockquote>
     *
     * @param   str   the <code>String</code> that is concatenated to the end   参数str是 连接到this字符串尾部的字符串。 
     *                of this <code>String</code>.
     * @return  a string that represents the concatenation of this object's   返回一个代表了  this对象字符连接着 后面紧随参数字符串的字符的新字符串。 
     *          characters followed by the string argument's characters.
     */
    public String concat(String str) {
        int otherLen = str.length();
        if (otherLen == 0) {
            return this;
        }
        int len = value.length;
        char buf[] = Arrays.copyOf(value, len + otherLen);
        str.getChars(buf, len);
        return new String(buf, true);
    }

    /**
     * Returns a new string resulting from replacing all occurrences of
     * <code>oldChar</code> in this string with <code>newChar</code>.  返回一个新字符串，结果来自于用newChar替换所有this字符串里出现的oldChar。
     * <p>
     * If the character <code>oldChar</code> does not occur in the
     * character sequence represented by this <code>String</code> object,  如果在this字符串对象代表的字符序列里没有出现 这个oldChar字符，
     * then a reference to this <code>String</code> object is returned.  那么返回this字符串对象的一个引用。 
     * Otherwise, a new <code>String</code> object is created that   其他情况， 创建一个新的字符串对象， 它代表了一个与this字符串对象描述的字符序列完全相同的字符序列。 
     * represents a character sequence identical to the character sequence
     * represented by this <code>String</code> object, except that every   除了用出现的newChar替换的每一个出现的oldChar。
     * occurrence of <code>oldChar</code> is replaced by an occurrence
     * of <code>newChar</code>.
     * <p>
     * Examples:  例如:
     * <blockquote><pre>
     * "mesquite in your cellar".replace('e', 'o')
     *         returns "mosquito in your collar"
     * "the war of baronets".replace('r', 'y')
     *         returns "the way of bayonets"
     * "sparring with a purple porpoise".replace('p', 't')
     *         returns "starring with a turtle tortoise"
     * "JonL".replace('q', 'x') returns "JonL" (no change)
     * </pre></blockquote>
     *
     * @param   oldChar   the old character.
     * @param   newChar   the new character.  
     * @return  a string derived from this string by replacing every   返回 this字符串里用newChar替换出现的每一个oldChar 后   衍生出来的一个新字符串。 
     *          occurrence of <code>oldChar</code> with <code>newChar</code>.
     */
    public String replace(char oldChar, char newChar) {
        if (oldChar != newChar) {
            int len = value.length;
            int i = -1;
            char[] val = value; /* avoid getfield opcode */

            while (++i < len) {
                if (val[i] == oldChar) {
                    break;
                }
            }
            if (i < len) {
                char buf[] = new char[len];
                for (int j = 0; j < i; j++) {
                    buf[j] = val[j];
                }
                while (i < len) {
                    char c = val[i];
                    buf[i] = (c == oldChar) ? newChar : c;
                    i++;
                }
                return new String(buf, true);
            }
        }
        return this;
    }

    /**
     * Tells whether or not this string matches the given <a
     * href="../util/regex/Pattern.html#sum">regular expression</a>.
     *  描述  给予的正则表达式 是否与 this字符串相匹配。
     * <p> An invocation of this method of the form
     * <i>str</i><tt>.matches(</tt><i>regex</i><tt>)</tt> yields exactly the
     * same result as the expression
     * 这个方法的调用正好是从 那表达式 生产出同样的结果。 
     * <blockquote><tt> {@link java.util.regex.Pattern}.{@link
     * java.util.regex.Pattern#matches(String,CharSequence)
     * matches}(</tt><i>regex</i><tt>,</tt> <i>str</i><tt>)</tt></blockquote>
     *
     * @param   regex
     *          the regular expression to which this string is to be matched
     *    这个正则 表达式  与this字符串 匹配用的。 
     * @return  <tt>true</tt> if, and only if, this string matches the
     *          given regular expression
     *  只有当this字符串 与给予的正则表示相匹配时，才返回true。
     * @throws  PatternSyntaxException
     *          if the regular expression's syntax is invalid
     *  如果正则表达式的语法是无效的，那么就抛出 模式语法异常。 
     * @see java.util.regex.Pattern
     *
     * @since 1.4
     * @spec JSR-51
     */
    public boolean matches(String regex) {
        return Pattern.matches(regex, this);
    }

    /**
     * Returns true if and only if this string contains the specified
     * sequence of char values.
     *  如果this字符串 包含指定 字符值的序列 就返回true
     * @param s the sequence to search for   待搜索的字符序列。 
     * @return true if this string contains <code>s</code>, false otherwise  如果this字符串包含 参数s就返回true，其他情况返回false'
     * @throws NullPointerException if <code>s</code> is <code>null</code>  如果s是空的就抛出空指针异常。 
     * @since 1.5
     */
    public boolean contains(CharSequence s) {
        return indexOf(s.toString()) > -1;
    }

    /**
     * Replaces the first substring of this string that matches the given <a
     * href="../util/regex/Pattern.html#sum">regular expression</a> with the
     * given replacement.
     * 在this字符串中用指定的repalcement字符串参数替换 与 给定正则表达式第一次匹配到的子串。
     * <p> An invocation of this method of the form
     * <i>str</i><tt>.replaceFirst(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>
     * yields exactly the same result as the expression repl产生出与表达式 正好一样的结果。 
     * 这个方法的调用  来自于 str.replaceFirst(regex).
     * <blockquote><tt>
     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
     * compile}(</tt><i>regex</i><tt>).{@link
     * java.util.regex.Pattern#matcher(java.lang.CharSequence)
     * matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceFirst
     * replaceFirst}(</tt><i>repl</i><tt>)</tt></blockquote>
     *
     *<p>
     * Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the  注意 反斜杠 和美元符号在字符串里替换的时候可能导致 结果与 已经处理替换过的文字字符不同。 
     * replacement string may cause the results to be different than if it were
     * being treated as a literal replacement string; see 参见
     * {@link java.util.regex.Matcher#replaceFirst}.
     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
     * meaning of these characters, if desired.
     *  如果需要的话，可以使用Matcher类来抑制 一些有特别意义的字符。
     * @param   regex
     *          the regular expression to which this string is to be matched 这个正则表示是与 this字符串  匹配用的。 
     * @param   replacement
     *          the string to be substituted for the first match
     *			这个字符串 用来替换第一次匹配成功的字符。
     * @return  The resulting <tt>String</tt>  返回结果字符串。 
     * 
     * @throws  PatternSyntaxException
     *          if the regular expression's syntax is invalid
     *		如果正则表达式的语法是无效的，就抛出PatternSyntaxException异常。 
     * @see java.util.regex.Pattern
     *
     * @since 1.4
     * @spec JSR-51
     */
    public String replaceFirst(String regex, String replacement) {
        return Pattern.compile(regex).matcher(this).replaceFirst(replacement);
    }

    /**
     * Replaces each substring of this string that matches the given <a
     * href="../util/regex/Pattern.html#sum">regular expression</a> with the
     * given replacement.
     *  用给予的replacement参数字符串 在this字符串中  替换 与 给予的正则表达式 相匹配的每一个子串。 
     * <p> An invocation of this method of the form
     * <i>str</i><tt>.replaceAll(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>
     * yields exactly the same result as the expression
     * 这个方法的调用 来自于 str.replaceAll(regex,repl).   产生出与表示 完全相同的结果。 
     * <blockquote><tt>
     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
     * compile}(</tt><i>regex</i><tt>).{@link
     * java.util.regex.Pattern#matcher(java.lang.CharSequence)
     * matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceAll
     * replaceAll}(</tt><i>repl</i><tt>)</tt></blockquote>
     *
     *<p>
     * Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the  注意：reppacement参数字符串里的 反斜杠和美元符号可能导致 已经处理过的文字字符的结果不同。 
     * replacement string may cause the results to be different than if it were
     * being treated as a literal replacement string; see
     * {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.
     * Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
     * meaning of these characters, if desired.
     * 如果有 需要的话，可以使用Matcher类来抑制一些有特殊意义的字符。
     * @param   regex
     *          the regular expression to which this string is to be matched  regex参数是 一个用来与this字符串做匹配的 正则表达式。 
     * @param   replacement
     *          the string to be substituted for each match
     * replacement参数字符串是 用来 替换每一个匹配到的字符。 
     * @return  The resulting <tt>String</tt>
     * 返回结果字符串。 
     * @throws  PatternSyntaxException
     *          if the regular expression's syntax is invalid
     *  如果正则表达式的语法是无效的，那么就抛出PatternSyntaxException异常。 
     * @see java.util.regex.Pattern
     *
     * @since 1.4
     * @spec JSR-51
     */
    public String replaceAll(String regex, String replacement) {
        return Pattern.compile(regex).matcher(this).replaceAll(replacement);
    }

    /**
     * Replaces each substring of this string that matches the literal target
     * sequence with the specified literal replacement sequence. The
     * replacement proceeds from the beginning of the string to the end, for
     * example, replacing "aa" with "b" in the string "aaa" will result in
     * "ba" rather than "ab".
     * 用指定的replacment文字序列 替换掉this字符串中 与target文字序列相匹配的每一个子串。 
	 * repacement参数从字符串的开始执行匹配，直到replacement结束。  例如:在字符串"aaa"里用"b"替换掉"aa",结果将会是"ba"而不是"ab"。
     * @param  target The sequence of char values to be replaced 参数target是被替换的字符值序列
     * @param  replacement The replacement sequence of char values 参数replacement是 替换字符值序列用的。
     * @return  The resulting string 返回结果字符串。
     * @throws NullPointerException if <code>target</code> or
     *         <code>replacement</code> is <code>null</code>.  如果target或repacement参数是null就抛出空指针异常。  
     * @since 1.5
     */
    public String replace(CharSequence target, CharSequence replacement) {
        return Pattern.compile(target.toString(), Pattern.LITERAL).matcher(
                this).replaceAll(Matcher.quoteReplacement(replacement.toString()));
    }

    /**
     * Splits this string around matches of the given
     * <a href="../util/regex/Pattern.html#sum">regular expression</a>.
     * 对this字符串周围 用给予的正则表达式进行匹配，匹配成功后 进行分割。 
     * <p> The array returned by this method contains each substring of this
     * string that is terminated by another substring that matches the given
     * expression or is terminated by the end of the string.  The substrings in
     * the array are in the order in which they occur in this string.  If the
     * expression does not match any part of the input then the resulting array
     * has just one element, namely this string.
     * 这个方法返回的是 包含this字符串的每个子串的数组。其中的元素分割是通过 匹配到给予的表达式，就结束。
	 * 或直到字符串的尾部， 这个元素结束。   数组里的子串的顺序是按在this字符串出现的顺序排列的。 
	 * 如果表达式没有匹配到输入的任何一部分，那么返回的结果数组就只有一个元素，也就是this字符串。 
     * <p> The <tt>limit</tt> parameter controls the number of times the
     * pattern is applied and therefore affects the length of the resulting
     * array.  If the limit <i>n</i> is greater than zero then the pattern
     * will be applied at most <i>n</i>&nbsp;-&nbsp;1 times, the array's
     * length will be no greater than <i>n</i>, and the array's last entry
     * will contain all input beyond the last matched delimiter.  If <i>n</i>
     * is non-positive then the pattern will be applied as many times as
     * possible and the array can have any length.  If <i>n</i> is zero then
     * the pattern will be applied as many times as possible, the array can
     * have any length, and trailing empty strings will be discarded.
     * 参数limit 控制着应用模式的时间数，因此也直接影响着结果数组的长度。 
	 *如果limit参数的数字n大于0那么这个模式将会应用到更多的数字n。
	 *１次时，这数组的长度将不会大于ｎ，并且数组的最后一个条目将包含超出最后匹配分隔符的所有输入。　
	 × 如果n是非正数 那么模式将可能会应用许多时间，并且数组可以有任何长度。 
	 * 如果n是0 那么模式可能会应用 更多时间，数组可以有任意产毒，并且后面的空字符串将会被抛弃。 
     * <p> The string <tt>"boo:and:foo"</tt>, for example, yields the
     * following results with these parameters:
     *  字符串"boo"和"foo",例如: 用这些参数生产出如下的结果:
     * <blockquote><table cellpadding=1 cellspacing=0 summary="Split example showing regex, limit, and result">
     * <tr>
     *     <th>Regex</th>
     *     <th>Limit</th>
     *     <th>Result</th>
     * </tr>
     * <tr><td align=center>:</td>
     *     <td align=center>2</td>
     *     <td><tt>{ "boo", "and:foo" }</tt></td></tr>
     * <tr><td align=center>:</td>
     *     <td align=center>5</td>
     *     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>
     * <tr><td align=center>:</td>
     *     <td align=center>-2</td>
     *     <td><tt>{ "boo", "and", "foo" }</tt></td></tr>
     * <tr><td align=center>o</td>
     *     <td align=center>5</td>
     *     <td><tt>{ "b", "", ":and:f", "", "" }</tt></td></tr>
     * <tr><td align=center>o</td>
     *     <td align=center>-2</td>
     *     <td><tt>{ "b", "", ":and:f", "", "" }</tt></td></tr>
     * <tr><td align=center>o</td>
     *     <td align=center>0</td>
     *     <td><tt>{ "b", "", ":and:f" }</tt></td></tr>
     * </table></blockquote>
     *
     * <p> An invocation of this method of the form
     * <i>str.</i><tt>split(</tt><i>regex</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>
     * yields the same result as the expression
     *  这个方法的调用来自于 str.split，产生出和这个表达式同样的结果。 
     * <blockquote>
     * {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
     * compile}<tt>(</tt><i>regex</i><tt>)</tt>.{@link
     * java.util.regex.Pattern#split(java.lang.CharSequence,int)
     * split}<tt>(</tt><i>str</i><tt>,</tt>&nbsp;<i>n</i><tt>)</tt>
     * </blockquote>
     *
     *
     * @param  regex
     *         the delimiting regular expression
     *         正则表达式的定界。
     * @param  limit
     *         the result threshold, as described above
     *  		limit参数代表结果的临界值， 如上所述。 
     * @return  the array of strings computed by splitting this string
     *          around matches of the given regular expression
     *   用给予的正则表达式对this字符串的周围进行匹配，返回对this字符串分割计算后的字符串数组。 
     * @throws  PatternSyntaxException
     *          if the regular expression's syntax is invalid
     *    如果正则表达式的语法是无效的，抛出PatternSyntaxException异常。 
     * @see java.util.regex.Pattern
     *
     * @since 1.4
     * @spec JSR-51
     */
    public String[] split(String regex, int limit) {
        /* fastpath if the regex is a  快速路径:如果表达式是一个
         (1)one-char String and this character is not one of the
            RegEx's meta characters ".$|()[{^?*+\\", or  一个字符 的 字符串和这个字符不是正则表达式的元字符，或
         (2)two-char String and the first char is the backslash and
            the second is not the ascii digit or ascii letter.  两个字符的 字符串 并且第一个字符反斜杠和第二个不是ASCII数字和ASCII字母。 
         */
        char ch = 0;
        if (((regex.value.length == 1 &&
             ".$|()[{^?*+\\".indexOf(ch = regex.charAt(0)) == -1) ||
             (regex.length() == 2 &&
              regex.charAt(0) == '\\' &&
              (((ch = regex.charAt(1))-'0')|('9'-ch)) < 0 &&
              ((ch-'a')|('z'-ch)) < 0 &&
              ((ch-'A')|('Z'-ch)) < 0)) &&
            (ch < Character.MIN_HIGH_SURROGATE ||
             ch > Character.MAX_LOW_SURROGATE))
        {
            int off = 0;
            int next = 0;
            boolean limited = limit > 0;
            ArrayList<String> list = new ArrayList<>();
            while ((next = indexOf(ch, off)) != -1) {
                if (!limited || list.size() < limit - 1) {
                    list.add(substring(off, next));
                    off = next + 1;
                } else {    // last one
                    //assert (list.size() == limit - 1);
                    list.add(substring(off, value.length));
                    off = value.length;
                    break;
                }
            }
            // If no match was found, return this  如果没有找到 匹配，包含this字符串的一个字符串数组
            if (off == 0)
                return new String[]{this};

            // Add remaining segment  添加剩下的部分。 
            if (!limited || list.size() < limit)
                list.add(substring(off, value.length));

            // Construct result 构造结果。 
            int resultSize = list.size();
            if (limit == 0)
                while (resultSize > 0 && list.get(resultSize - 1).length() == 0)
                    resultSize--;
            String[] result = new String[resultSize];
            return list.subList(0, resultSize).toArray(result);
        }
        return Pattern.compile(regex).split(this, limit);
    }

    /**
     * Splits this string around matches of the given <a
     * href="../util/regex/Pattern.html#sum">regular expression</a>.
     *  用给予的正则表达式 对this字符串 的匹配 附近进行分割。 
     * <p> This method works as if by invoking the two-argument {@link
     * #split(String, int) split} method with the given expression and a limit
     * argument of zero.  Trailing empty strings are therefore not included in
     * the resulting array.
     *  如果通过调用两个参数的方式运行这个方法，那么用给予的表达式和参数0来做分割。 
	 *  因此，返回的结果数组中不包含 最后的空串。
     * <p> The string <tt>"boo:and:foo"</tt>, for example, yields the following
     * results with these expressions:
     * 例如字符串 "boo:and:foo" , 用这表达式产生出 如下的结果。 
     * <blockquote><table cellpadding=1 cellspacing=0 summary="Split examples showing regex and result">
     * <tr>
     *  <th>Regex</th>
     *  <th>Result</th>
     * </tr>
     * <tr><td align=center>:</td>  通过冒号进行分割
     *     分割结果是<td><tt>{ "boo", "and", "foo" }</tt></td></tr>  
     * <tr><td align=center>o</td> 通过字符'o'进行分割
     *    分割结果是 <td><tt>{ "b", "", ":and:f" }</tt></td></tr>
     * </table></blockquote>
     *
     *
     * @param  regex
     *         the delimiting regular expression
     *			用来 做定界的正则表达式
     * @return  the array of strings computed by splitting this string
     *          around matches of the given regular expression
     *  返回   通过给予的正则表达式对 this字符串中匹配处 附近进行分割，来计算出 分割后的字符串数组。 
     * @throws  PatternSyntaxException
     *          if the regular expression's syntax is invalid
     *   乳沟正则表达式的语法无效，抛出异常。 
     * @see java.util.regex.Pattern
     *
     * @since 1.4
     * @spec JSR-51
     */
    public String[] split(String regex) {
        return split(regex, 0);
    }

    /**  
     * Converts all of the characters in this <code>String</code> to lower 使用给予 的Locale()的规则将this字符串里的所有字符转换为小写的。 
     * case using the rules of the given <code>Locale</code>.  Case mapping is based
     * on the Unicode Standard version specified by the {@link java.lang.Character Character}  当通过指定的Character类来在Unicode标准版本的基础上进行映射的情况。 
     * class. Since case mappings are not always 1:1 char mappings, the resulting 后来映射的情况 就不总是 1：1 的字符映射了。 
     * <code>String</code> may be a different length than the original <code>String</code>.
     * <p>   结果字符串可能和元字符串是不同的长度。 
     * Examples of lowercase  mappings are in the following table: 例如： 小写字母的映射是如下的表:
     * <table border="1" summary="Lowercase mapping examples showing language code of locale, upper case, lower case, and description">
     * <tr>					摘要=展示局部语言代码的小写字母映射例子，大写字母， 小写字母，和描述符。 
     *   <th>Language Code of Locale</th>  
     *   <th>Upper Case</th>
     *   <th>Lower Case</th>
     *   <th>Description</th>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0130</td>
     *   <td>&#92;u0069</td>
     *   <td>capital letter I with dot above -&gt; small letter i</td>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0049</td>
     *   <td>&#92;u0131</td>
     *   <td>capital letter I -&gt; small letter dotless i </td>
     * </tr>
     * <tr>
     *   <td>(all)</td>
     *   <td>French Fries</td>
     *   <td>french fries</td>
     *   <td>lowercased all chars in String</td>
     * </tr>
     * <tr>
     *   <td>(all)</td>
     *   <td><img src="doc-files/capiota.gif" alt="capiota"><img src="doc-files/capchi.gif" alt="capchi">
     *       <img src="doc-files/captheta.gif" alt="captheta"><img src="doc-files/capupsil.gif" alt="capupsil">
     *       <img src="doc-files/capsigma.gif" alt="capsigma"></td>
     *   <td><img src="doc-files/iota.gif" alt="iota"><img src="doc-files/chi.gif" alt="chi">
     *       <img src="doc-files/theta.gif" alt="theta"><img src="doc-files/upsilon.gif" alt="upsilon">
     *       <img src="doc-files/sigma1.gif" alt="sigma"></td>
     *   <td>lowercased all chars in String</td>
     * </tr>
     * </table>
     *
     * @param locale use the case transformation rules for this locale  使用参数locale的这种转换规则。
     * @return the <code>String</code>, converted to lowercase. 返回字符串转换后的小写字母。 
     * @see     java.lang.String#toLowerCase()
     * @see     java.lang.String#toUpperCase()
     * @see     java.lang.String#toUpperCase(Locale)
     * @since   1.1
     */
    public String toLowerCase(Locale locale) {
        if (locale == null) {
            throw new NullPointerException();
        }

        int firstUpper;
        final int len = value.length;

        /* Now check if there are any characters that need to be changed.   现在检测 这里的任何需要改变的字符 */
        scan: {
            for (firstUpper = 0 ; firstUpper < len; ) {
                char c = value[firstUpper];
                if ((c >= Character.MIN_HIGH_SURROGATE)
                        && (c <= Character.MAX_HIGH_SURROGATE)) {
                    int supplChar = codePointAt(firstUpper);
                    if (supplChar != Character.toLowerCase(supplChar)) {
                        break scan;
                    }
                    firstUpper += Character.charCount(supplChar);
                } else {
                    if (c != Character.toLowerCase(c)) {
                        break scan;
                    }
                    firstUpper++;
                }
            }
            return this;
        }

        char[] result = new char[len];
        int resultOffset = 0;  /* result may grow, so i+resultOffset  结果可能在发展， 所以i+resultOffset 写出的是结果里的位置。 
                                * is the write location in result */

        /* Just copy the first few lowerCase characters.   所以只需负值第一个小写字符 */
        System.arraycopy(value, 0, result, 0, firstUpper);

        String lang = locale.getLanguage();
        boolean localeDependent =
                (lang == "tr" || lang == "az" || lang == "lt");
        char[] lowerCharArray;
        int lowerChar;
        int srcChar;
        int srcCount;
        for (int i = firstUpper; i < len; i += srcCount) {
            srcChar = (int)value[i];
            if ((char)srcChar >= Character.MIN_HIGH_SURROGATE
                    && (char)srcChar <= Character.MAX_HIGH_SURROGATE) {
                srcChar = codePointAt(i);
                srcCount = Character.charCount(srcChar);
            } else {
                srcCount = 1;
            }
            if (localeDependent || srcChar == '\u03A3') { // GREEK CAPITAL LETTER SIGMA
                lowerChar = ConditionalSpecialCasing.toLowerCaseEx(this, i, locale);
            } else if (srcChar == '\u0130') { // LATIN CAPITAL LETTER I DOT
                lowerChar = Character.ERROR;
            } else {
                lowerChar = Character.toLowerCase(srcChar);
            }
            if ((lowerChar == Character.ERROR)
                    || (lowerChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {
                if (lowerChar == Character.ERROR) {
                    if (!localeDependent && srcChar == '\u0130') {
                        lowerCharArray =
                                ConditionalSpecialCasing.toLowerCaseCharArray(this, i, Locale.ENGLISH);
                    } else {
                        lowerCharArray =
                                ConditionalSpecialCasing.toLowerCaseCharArray(this, i, locale);
                    }
                } else if (srcCount == 2) {
                    resultOffset += Character.toChars(lowerChar, result, i + resultOffset) - srcCount;
                    continue;
                } else {
                    lowerCharArray = Character.toChars(lowerChar);
                }

                /* Grow result if needed  如果需要结果发展变化*/
                int mapLen = lowerCharArray.length;
                if (mapLen > srcCount) {
                    char[] result2 = new char[result.length + mapLen - srcCount];
                    System.arraycopy(result, 0, result2, 0, i + resultOffset);
                    result = result2;
                }
                for (int x = 0; x < mapLen; ++x) {
                    result[i + resultOffset + x] = lowerCharArray[x];
                }
                resultOffset += (mapLen - srcCount);
            } else {
                result[i + resultOffset] = (char)lowerChar;
            }
        }
        return new String(result, 0, len + resultOffset);
    }

    /**
     * Converts all of the characters in this <code>String</code> to lower
     * case using the rules of the default locale. This is equivalent to calling
     * <code>toLowerCase(Locale.getDefault())</code>.  转换this字符串里的所有字符为小写字母， 使用缺省的local规则。这个与调用toLowerCase(Locale.getDeault)是相等的。
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are   to be interpreted locale
     * independently.  注意， 这个方法是局部敏感的， 如果用于解释的字符串 是独立的，则可能产生意外的结果 。
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags. 例如 程序语言标识符， 协议键，和HTML标签。 
     * For instance, <code>"TITLE".toLowerCase()</code> in a Turkish locale
     * returns <code>"t\u005Cu0131tle"</code>, where '\u005Cu0131' is the
     * LATIN SMALL LETTER DOTLESS I character.
	 * 例如，"TITLE"转为小写 在 土耳其局部语言里返回 t\u005Cu0131tle ， \u005Cu0131 是拉丁语里的小写字符。 
     * To obtain correct results for locale insensitive strings, use  为局部不敏感的提供 正确的结果，使用toLowerCase(Local.ENGLISH)。
     * <code>toLowerCase(Locale.ENGLISH)</code>.
     * <p>
     * @return  the <code>String</code>, converted to lowercase.  返回字符串转换后的小写字母。 
     * @see     java.lang.String#toLowerCase(Locale)
     */	
    public String toLowerCase() {
        return toLowerCase(Locale.getDefault());
    }

    /**
     * Converts all of the characters in this <code>String</code> to upper
     * case using the rules of the given <code>Locale</code>. Case mapping is based
     * on the Unicode Standard version specified by the {@link java.lang.Character Character}
     * class. Since case mappings are not always 1:1 char mappings, the resulting
     * <code>String</code> may be a different length than the original <code>String</code>.
     * <p> 转换this字符串中的所有字符为大写字母，使用给予的Local规则。 这种情况的映射是基于Character类的指定Unicode标准版本。
	 * 此后这种情况的映射 不总是 1：1的字符映射。 返回的结果字符串可能是与源字符串 不同的长度。 
     * Examples of locale-sensitive and 1:M case mappings are in the following table.  地区敏感的例子 和1：m的情况映射在如下 表里。
     * <p>
     * <table border="1" summary="Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.">
     * <tr>                        1：m的地区敏感映射的例子。                        展示地区的语言代码， 小写，大写， 和描述符。 
     *   <th>Language Code of Locale</th>  地区的语言代码。 
     *   <th>Lower Case</th>
     *   <th>Upper Case</th>
     *   <th>Description</th>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0069</td>
     *   <td>&#92;u0130</td>
     *   <td>small letter i -&gt; capital letter I with dot above</td>
     * </tr>
     * <tr>
     *   <td>tr (Turkish)</td>
     *   <td>&#92;u0131</td>
     *   <td>&#92;u0049</td>
     *   <td>small letter dotless i -&gt; capital letter I</td>
     * </tr>
     * <tr>
     *   <td>(all)</td>
     *   <td>&#92;u00df</td>
     *   <td>&#92;u0053 &#92;u0053</td>
     *   <td>small letter sharp s -&gt; two letters: SS</td>
     * </tr>
     * <tr>
     *   <td>(all)</td>
     *   <td>Fahrvergn&uuml;gen</td>
     *   <td>FAHRVERGN&Uuml;GEN</td>
     *   <td></td>
     * </tr>
     * </table> 
     * @param locale use the case transformation rules for this locale  参数local使用这个locale的规则来做情形转换。 
     * @return the <code>String</code>, converted to uppercase.  返回转换后的大写字符串。 
     * @see     java.lang.String#toUpperCase()
     * @see     java.lang.String#toLowerCase()
     * @see     java.lang.String#toLowerCase(Locale)
     * @since   1.1
     */
    public String toUpperCase(Locale locale) {
        if (locale == null) {
            throw new NullPointerException();
        }

        int firstLower;
        final int len = value.length;

        /* Now check if there are any characters that need to be changed. 
		   现在检查是否有任何字符需要更改。 */
        scan: {
           for (firstLower = 0 ; firstLower < len; ) {
                int c = (int)value[firstLower];
                int srcCount;
                if ((c >= Character.MIN_HIGH_SURROGATE)
                        && (c <= Character.MAX_HIGH_SURROGATE)) {
                    c = codePointAt(firstLower);
                    srcCount = Character.charCount(c);
                } else {
                    srcCount = 1;
                }
                int upperCaseChar = Character.toUpperCaseEx(c);
                if ((upperCaseChar == Character.ERROR)
                        || (c != upperCaseChar)) {
                    break scan;
                }
                firstLower += srcCount;
            }
            return this;
        }

        char[] result = new char[len]; /* may grow  可以自动拓展*/
        int resultOffset = 0;  /* result may grow, so i+resultOffset  结果可以自动拓展，所以i+resultOffset 是写出到result的位置。 
         * is the write location in result */

        /* Just copy the first few upperCase characters.    正好复制前几个 大写字符*/
        System.arraycopy(value, 0, result, 0, firstLower);

        String lang = locale.getLanguage();
        boolean localeDependent =
                (lang == "tr" || lang == "az" || lang == "lt");
        char[] upperCharArray;
        int upperChar;
        int srcChar;
        int srcCount;
        for (int i = firstLower; i < len; i += srcCount) {
            srcChar = (int)value[i];
            if ((char)srcChar >= Character.MIN_HIGH_SURROGATE &&
                (char)srcChar <= Character.MAX_HIGH_SURROGATE) {
                srcChar = codePointAt(i);
                srcCount = Character.charCount(srcChar);
            } else {
                srcCount = 1;
            }
            if (localeDependent) {
                upperChar = ConditionalSpecialCasing.toUpperCaseEx(this, i, locale);
            } else {
                upperChar = Character.toUpperCaseEx(srcChar);
            }
            if ((upperChar == Character.ERROR)
                    || (upperChar >= Character.MIN_SUPPLEMENTARY_CODE_POINT)) {
                if (upperChar == Character.ERROR) {
                    if (localeDependent) {
                        upperCharArray =
                                ConditionalSpecialCasing.toUpperCaseCharArray(this, i, locale);
                    } else {
                        upperCharArray = Character.toUpperCaseCharArray(srcChar);
                    }
                } else if (srcCount == 2) {
                    resultOffset += Character.toChars(upperChar, result, i + resultOffset) - srcCount;
                    continue;
                } else {
                    upperCharArray = Character.toChars(upperChar);
                }

                /* Grow result if needed   如果结果需要发展变化 */
                int mapLen = upperCharArray.length;
                if (mapLen > srcCount) {
                    char[] result2 = new char[result.length + mapLen - srcCount];
                    System.arraycopy(result, 0, result2, 0, i + resultOffset);
                    result = result2;
                }
                for (int x = 0; x < mapLen; ++x) {
                    result[i + resultOffset + x] = upperCharArray[x];
                }
                resultOffset += (mapLen - srcCount);
            } else {
                result[i + resultOffset] = (char)upperChar;
            }
        }
        return new String(result, 0, len + resultOffset);
    }

    /**
     * Converts all of the characters in this <code>String</code> to upper
     * case using the rules of the default locale. This method is equivalent to
     * <code>toUpperCase(Locale.getDefault())</code>. 使用默认的地区规则 转换this字符串里的所有字符为大写字母。 这个方法与toUpperCase(Locale.getDefault())相等。 
     * <p>
     * <b>Note:</b> This method is locale sensitive, and may produce unexpected
     * results if used for strings that are intended to be interpreted locale
     * independently.  注意:这个方法是地区敏感的， 如果使用的字符串是 被解释出来的地区是独立的 ， 那么可能产生出意外的结果。 
     * Examples are programming language identifiers, protocol keys, and HTML
     * tags.  例如编程语言标识符， 协议键，和HTML标签。 
     * For instance, <code>"title".toUpperCase()</code> in a Turkish locale
     * returns <code>"T\u005Cu0130TLE"</code>, where '\u005Cu0130' is the
     * LATIN CAPITAL LETTER I WITH DOT ABOVE character.  例如："title".toUpperCase() 是土耳其地区的返回 T\u005Cu0130TLE
     * To obtain correct results for locale insensitive strings, use 
     * <code>toUpperCase(Locale.ENGLISH)</code>.
     * <p> 使用toUpperCase(Local.ENGLISH)为不敏感的地区字符串 获取正确的结果。 
     * @return  the <code>String</code>, converted to uppercase.
     * @see     java.lang.String#toUpperCase(Locale)
     */
    public String toUpperCase() {
        return toUpperCase(Locale.getDefault());
    }

    /**
     * Returns a copy of the string, with leading and trailing whitespace
     * omitted.  忽略前导和尾部的空格字符，返回字符串的一个拷贝
     * <p>
     * If this <code>String</code> object represents an empty character
     * sequence, or the first and last characters of character sequence
     * represented by this <code>String</code> object both have codes
     * greater than <code>'&#92;u0020'</code> (the space character), then a
     * reference to this <code>String</code> object is returned.
     * <p>  如果this字符串对象代表一个空的字符序列， 或 第一个和this字符串对象代表的字符序列的最后一个字符的代码都大于(空格字符),那么返回this字符串对象的一个引用。 
     * Otherwise, if there is no character with a code greater than
     * <code>'&#92;u0020'</code> in the string, then a new
     * <code>String</code> object representing an empty string is created
     * and returned.
     * <p>  如果字符串里的是空格字符，那么创建一个新的代表空字符串的字符串对象，并返回它。
     * Otherwise, let <i>k</i> be the index of the first character in the
     * string whose code is greater than <code>'&#92;u0020'</code>, and let
     * <i>m</i> be the index of the last character in the string whose code
     * is greater than <code>'&#92;u0020'</code>. A new <code>String</code>
     * object is created, representing the substring of this string that
     * begins with the character at index <i>k</i> and ends with the
     * character at index <i>m</i>-that is, the result of
     * <code>this.substring(<i>k</i>,&nbsp;<i>m</i>+1)</code>.
     * <p> 其他情况， 让k是字符串里的第一个字符的索引的代码大于空格字符，并且让m是字符串里的最后一个字符的索引，k的代码大于空格字符。 
	 *　创建一个新的字符串对象，　代表了ｔｈｉｓ字符串的子串，　这子串从索引ｋ出的字符开始　索引ｍ处的字符结束,也就是this.substring(k,m+1)的结果。 
     * This method may be used to trim whitespace (as defined above) from
     * the beginning and end of a string.
     * 这个方法可以去掉一个字符串首部和尾部的空格字符。
     * @return  A copy of this string with leading and trailing white
     *          space removed, or this string if it has no leading or
     *          trailing white space. 
	 *  返回 移除掉前导和尾部的空格后的一个this字符串的拷贝。或如果这个this字符串没有前导或尾部空格。 
     */
    public String trim() {
        int len = value.length;
        int st = 0;
        char[] val = value;    /* avoid getfield opcode */

        while ((st < len) && (val[st] <= ' ')) {
            st++;
        }
        while ((st < len) && (val[len - 1] <= ' ')) {
            len--;
        }
        return ((st > 0) || (len < value.length)) ? substring(st, len) : this;
    }

    /**
     * This object (which is already a string!) is itself returned.
     * 返回this对象(已经准备好的字符串) 自身。 
     * @return  the string itself.  返回字符串自身。 
     */
    public String toString() {
        return this;
    }

    /**
     * Converts this string to a new character array.
     *  转换this字符串到一个新的字符数组
     * @return  a newly allocated character array whose length is the length 
     *          of this string and whose contents are initialized to contain
     *          the character sequence represented by this string.
     *  分配一个最新的字符数组， 它的长度是this字符擦混的长度，它的内容是用包含了this字符串代表的字符序列来初始化的。 
	 */ 
    public char[] toCharArray() {
        // Cannot use Arrays.copyOf because of class initialization order issues  不能使用Arrays.copyOf 因为存在类初始化的顺序问题
        char result[] = new char[value.length];
        System.arraycopy(value, 0, result, 0, value.length);
        return result;
    }

    /**
     * Returns a formatted string using the specified format string and
     * arguments.
     *  使用指定的格式字符串和参数 返回一个带有格式的字符串。
     * <p> The locale always used is the one returned by {@link
     * java.util.Locale#getDefault() Locale.getDefault()}.
     *  地区位置 locale总是使用的Locale。getDefault 来返回。
     * @param  format
     *         A <a href="../util/Formatter.html#syntax">format string</a>
     *			格式字符串参数
     * @param  args
     *         Arguments referenced by the format specifiers in the format
     *         string.  If there are more arguments than format specifiers, the
     *         extra arguments are ignored.  The number of arguments is
     *         variable and may be zero.  The maximum number of arguments is
     *         limited by the maximum dimension of a Java array as defined by
     *         <cite>The Java&trade; Virtual Machine Specification</cite>.
     *         The behaviour on a
     *         <tt>null</tt> argument depends on the <a
     *         href="../util/Formatter.html#syntax">conversion</a>.
     *  参数引用的是格式字符串里的格式说明符。如果有比格式说明符更多的参数，那么就忽略另外的参数。 
	 * 参数的个数可能是一个变量或可能是0.参数个数的上限是Java自定义的Java数组的最大尺寸。 虚拟机是指定的。
	 *　　一个null参数的行为 取决于  Formatter的 转换。 
     * @throws  IllegalFormatException   非法格式化异常
     *          If a format string contains an illegal syntax, a format
     *          specifier that is incompatible with the given arguments,
     *          insufficient arguments given the format string, or other
     *          illegal conditions.  For specification of all possible
     *          formatting errors, see the <a
     *          href="../util/Formatter.html#detail">Details</a> section of the
     *          formatter class specification.
     *       如果格式化字符串包含了一个错误的语法，格式说明符 与指定的参数不兼容， 与格式化字符串匹配的参数不够，或其他非法条件。
	 *		规范的所有　　可能的格式化错误，参见Formatter类的详细说明 请见  详情部分。 
     * @throws  NullPointerException
     *          If the <tt>format</tt> is <tt>null</tt>
     *			如果format是null就抛出空指针异常。 
     * @return  A formatted string
     *     返回一个格式化的字符串 。
     * @see  java.util.Formatter
     * @since  1.5
     */
    public static String format(String format, Object... args) {
        return new Formatter().format(format, args).toString();
    }

    /**
     * Returns a formatted string using the specified locale, format string,
     * and arguments.
     *  使用指定的地区，格式串和参数 返回一个 格式化的字符串。 
     * @param  l
     *         The {@linkplain java.util.Locale locale} to apply during
     *         formatting.  If <tt>l</tt> is <tt>null</tt> then no localization
     *         is applied.
     *  参数l是应用于格式化的 地区。 如果l是空，那么就没有地区被应用。 
     * @param  format
     *         A <a href="../util/Formatter.html#syntax">format string</a>
     *		格式化字符串
     * @param  args
     *         Arguments referenced by the format specifiers in the format
     *         string.  If there are more arguments than format specifiers, the
     *         extra arguments are ignored.  The number of arguments is
     *         variable and may be zero.  The maximum number of arguments is
     *         limited by the maximum dimension of a Java array as defined by
     *         <cite>The Java&trade; Virtual Machine Specification</cite>.
     *         The behaviour on a
     *         <tt>null</tt> argument depends on the <a
     *         href="../util/Formatter.html#syntax">conversion</a>.
     *  参数引用的是format字符串里的格式说明符。如果有格式说明符更多的参数，就忽略额外的参数。 
	 *  参数的个数可能是一个变量或0.参数个数的最大限制Java语言里定义的java数组的最大尺寸。 虚拟机详细说明。
	 *   一个null参数的行为 依赖于Formatter的 转换。 
     * @throws  IllegalFormatException  非法格式化异常。 
     *          If a format string contains an illegal syntax, a format
     *          specifier that is incompatible with the given arguments,
     *          insufficient arguments given the format string, or other
     *          illegal conditions.  For specification of all possible
     *          formatting errors, see the <a
     *          href="../util/Formatter.html#detail">Details</a> section of the
     *          formatter class specification
     *  如果format字符串包含一个错误的语法， 或格式说明符与给定的参数不兼容，或给定的格式化串的参数不够 ， 或其他非法的条件。 
	 *   规范里的所有可能的格式化错误， 参见 Formatter类的详情部分。 
     * @throws  NullPointerException
     *          If the <tt>format</tt> is <tt>null</tt>
     *      如果format是空 就抛出空指针异常。 
     * @return  A formatted string
     *   返回一个有格式字符串。 
     * @see  java.util.Formatter
     * @since  1.5
     */
    public static String format(Locale l, String format, Object... args) {
        return new Formatter(l).format(format, args).toString();
    }

    /**
     * Returns the string representation of the <code>Object</code> argument.
     *  返回代表 Object参数的字符串。 
     * @param   obj   an <code>Object</code>.  obj是一个对象。 
     * @return  if the argument is <code>null</code>, then a string equal to
     *          <code>"null"</code>; otherwise, the value of
     *          <code>obj.toString()</code> is returned.  如果参数是nulll，name返回与null相等的一个字符串。 其他情况，这个值返回的是 obj.toString。
     * @see     java.lang.Object#toString()
     */
    public static String valueOf(Object obj) {
        return (obj == null) ? "null" : obj.toString();
    }

    /**
     * Returns the string representation of the <code>char</code> array
     * argument. The contents of the character array are copied; subsequent
     * modification of the character array does not affect the newly
     * created string.
     *  返回代表了(字符数组)参数的一个字符串。  内容是拷贝自字符数组的。 以后对字符数组的修改将不会对新创建的字符串产生影响。 
     * @param   data   a <code>char</code> array.  参数data是一个字符数组
     * @return  a newly allocated string representing the same sequence of
     *          characters contained in the character array argument.  为 字符数组参数，分配一个新的字符串， 代表了包含了字符数组同样的字符序列。 
     */
    public static String valueOf(char data[]) {
        return new String(data);
    }

    /**
     * Returns the string representation of a specific subarray of the
     * <code>char</code> array argument. 返回  代表 一个字符数组参数的指定子数组的字符串。  
     * <p>
     * The <code>offset</code> argument is the index of the first
     * character of the subarray. The <code>count</code> argument
     * specifies the length of the subarray. The contents of the subarray
     * are copied; subsequent modification of the character array does not
     * affect the newly created string.
     *  offset参数是子数组的第一个字符的下标 。 count参数是指定的子数组的长度。 子数组的内容是拷贝的。 以后对子数组的修改不会影响新创建的字符串。 
     * @param   data     the character array.  参数data是一个字符数组。 
     * @param   offset   the initial offset into the value of the
     *                  <code>String</code>. offset参数是用来初始化 字符串的偏移值。 
     * @param   count    the length of the value of the <code>String</code>. count参数是字符串的长度的值。 
     * @return  a string representing the sequence of characters contained  
     *          in the subarray of the character array argument.  返回一个字符数组参数的 子数组。包含 了子数组的字符序列的 新字符串。 
     * @exception IndexOutOfBoundsException if <code>offset</code> is  如果offset是负数，或count是负数， 或offset+count比字符数组的长度要大， 就抛出下标越界异常。 
     *          negative, or <code>count</code> is negative, or
     *          <code>offset+count</code> is larger than
     *          <code>data.length</code>.
     */
    public static String valueOf(char data[], int offset, int count) {
        return new String(data, offset, count);
    }

    /**
     * Returns a String that represents the character sequence in the
     * array specified.
     *  返回指定的数组里代表子序列的 一个字符串。 
     * @param   data     the character array.    字符数组
     * @param   offset   initial offset of the subarray.  初始化子数组的偏移位置。
     * @param   count    length of the subarray.
     * @return  a <code>String</code> that contains the characters of the  返回一个包含字符数组的指定字符的字符串。 
     *          specified subarray of the character array.
     */
    public static String copyValueOf(char data[], int offset, int count) {
        // All public String constructors now copy the data.  所有公开的字符串构造函数都是现在这样拷贝数据。 
        return new String(data, offset, count);
    }

    /**
     * Returns a String that represents the character sequence in the
     * array specified.
     *  返回一个指定的数组里 代表 字符序列的一个 字符串。 
     * @param   data   the character array.   字符数组
     * @return  a <code>String</code> that contains the characters of the
     *          character array.
     * 返回  一个 包含字符数组的字符的字符串。 
	 */
	public static String copyValueOf(char data[]) {
        return new String(data);
    }

    /**
     * Returns the string representation of the <code>boolean</code> argument.
     * 返回代表布尔参数的 字符串。 
     * @param   b   a <code>boolean</code>.  布尔参数
     * @return  if the argument is <code>true</code>, a string equal to
     *          <code>"true"</code> is returned; otherwise, a string equal to
     *          <code>"false"</code> is returned. 如果参数是true，就返回与true相等的一个字符串。 其他情况， 返回一个与false相等的字符串。 
     */  
    public static String valueOf(boolean b) {
        return b ? "true" : "false";
    }

    /**
     * Returns the string representation of the <code>char</code>
     * argument.
     *  返回char参数代表的字符串。 
     * @param   c   a <code>char</code>.  参数c是一个字符
     * @return  a string of length <code>1</code> containing  返回  包含 参数c这个单一字符，长度为1 的一个字符串。 
     *          as its single character the argument <code>c</code>.
     */
    public static String valueOf(char c) {
        char data[] = {c};
        return new String(data, true);
    }

    /**
     * Returns the string representation of the <code>int</code> argument.
     * <p>  返回int型参数i   代表的字符串。 
     * The representation is exactly the one returned by the
     * <code>Integer.toString</code> method of one argument.
     *   返回的表现形式正好是通过 Integer.toString方法对一个整形参数做的转换。 
     * @param   i   an <code>int</code>.  
     * @return  a string representation of the <code>int</code> argument.  返回一个代表int参数的字符串。 
     * @see     java.lang.Integer#toString(int, int)
     */
    public static String valueOf(int i) {
        return Integer.toString(i);
    }

    /**
     * Returns the string representation of the <code>long</code> argument.
     * <p> 安徽代表long型参数的 字符串。 
     * The representation is exactly the one returned by the
     * <code>Long.toString</code> method of one argument.
     *  返回的表现形式 正好是 通过Long.toString(i)方法来处理的 。 
     * @param   l   a <code>long</code>.
     * @return  a string representation of the <code>long</code> argument. 返回代表long参数的一个字符串。 
     * @see     java.lang.Long#toString(long)
     */
    public static String valueOf(long l) {
        return Long.toString(l);
    }

    /**
     * Returns the string representation of the <code>float</code> argument.
     * <p> 返回代表float参数的字符串。 
     * The representation is exactly the one returned by the
     * <code>Float.toString</code> method of one argument.
     * 返回的表现形式 正好是 通过 Float.toString(f)方法来处理 浮点型参数的。 
     * @param   f   a <code>float</code>.
     * @return  a string representation of the <code>float</code> argument.  返回一个代表float参数的 字符串。 
     * @see     java.lang.Float#toString(float)
     */
    public static String valueOf(float f) {
        return Float.toString(f);
    }

    /**
     * Returns the string representation of the <code>double</code> argument.
     * <p>  返回代表double参数的字符串。 
     * The representation is exactly the one returned by the
     * <code>Double.toString</code> method of one argument.
     *  返回的表现形式正好是 通过Double.toString(d)方法来对double参数进行处理的。 
     * @param   d   a <code>double</code>.
     * @return  a  string representation of the <code>double</code> argument.  返回一个代表double参数的 字符串。 
     * @see     java.lang.Double#toString(double)
     */
    public static String valueOf(double d) {
        return Double.toString(d);
    }

    /**
     * Returns a canonical representation for the string object. 
     * <p>  返回字符串对象的规范表示形式。
     * A pool of strings, initially empty, is maintained privately by the
     * class <code>String</code>.
     * <p>  一个最初为空的字符串池  ， 私有的维护着 字符串类。 
     * When the intern method is invoked, if the pool already contains a
     * string equal to this <code>String</code> object as determined by
     * the {@link #equals(Object)} method, then the string from the pool is
     * returned. Otherwise, this <code>String</code> object is added to the
     * pool and a reference to this <code>String</code> object is returned.
     * <p> 当这个内部方法被调用， 就通过equals(Object)方法来判断 池中 是否已经包含了一个与this字符串对象相等的字符串， 然后从池中 返回这个字符串。 
	 *  其他情况， 将this字符串对象添加到 池中， 然后返回this字符串对象的一个引用。 
     * It follows that for any two strings <code>s</code> and <code>t</code>,
     * <code>s.intern()&nbsp;==&nbsp;t.intern()</code> is <code>true</code>
     * if and only if <code>s.equals(t)</code> is <code>true</code>.
     * <p> 因此，对于任何两个字符串 s和t ，当s.intern()==t.intern()为true时，如果只当s.equals(t)为真时。
     * All literal strings and string-valued constant expressions are
     * interned. String literals are defined in section 3.10.5 of the
     * <cite>The Java&trade; Language Specification</cite>.  语言规范。
     *  所有 文字字符串和字符串常量值表达式  都是 内部的。  字符串文字 被定义在Java的3.10.5的部分。 
     * @return  a string that has the same contents as this string, but is
     *          guaranteed to be from a pool of unique strings.   返回一个和this字符串同样内容的字符串 ，但是保证是从一个唯一的字符串池里的。 
     */
    public native String intern();

    /**
     * Seed value used for each alternative hash calculated.  看到的值是使用每个计算出来的哈希码替代的。 
     */
    private static final int HASHING_SEED;

    static {
        long nanos = System.nanoTime();
        long now = System.currentTimeMillis();
        int SEED_MATERIAL[] = {
                System.identityHashCode(String.class),
                System.identityHashCode(System.class),
                (int) (nanos >>> 32),
                (int) nanos,
                (int) (now >>> 32),
                (int) now,
                (int) (System.nanoTime() >>> 2)
        };

        // Use murmur3 to scramble the seeding material. 使用murmur3 来 争夺 播种材料。
        // Inline implementation to avoid loading classes  内联的实现来避免加载类。 
        int h1 = 0;

        // body
        for (int k1 : SEED_MATERIAL) {
            k1 *= 0xcc9e2d51;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 *= 0x1b873593;

            h1 ^= k1;
            h1 = (h1 << 13) | (h1 >>> 19);
            h1 = h1 * 5 + 0xe6546b64;
        }

        // tail (always empty, as body is always 32-bit chunks) 尾部(总是为空， 身体总是32位的块)

        // finalization 最终确定

        h1 ^= SEED_MATERIAL.length * 4;

        // finalization mix force all bits of a hash block to avalanche  最终化 强制混合 一个哈希块的所有位，直至崩落。 
        h1 ^= h1 >>> 16;
        h1 *= 0x85ebca6b;
        h1 ^= h1 >>> 13;
        h1 *= 0xc2b2ae35;
        h1 ^= h1 >>> 16;

        HASHING_SEED = h1;
    }

    /**
     * Cached value of the alternative hashing algorithm result  用哈希算法的结果替代 缓存的值。 
     */
    private transient int hash32 = 0;

    /**
     * Calculates a 32-bit hash value for this string.  为this字符串计算出一个32位的哈希值。 
     *
     * @return a 32-bit hash value for this string. 返回this字符串的一个32位的哈希值。 
     */
    int hash32() {
        int h = hash32;
        if (0 == h) {
           // harmless data race on hash32 here.   32位的无害哈希数据 在这运行。 
           h = sun.misc.Hashing.murmur3_32(HASHING_SEED, value, 0, value.length);

           // ensure result is not zero to avoid recalcing  确保结果不是0，以避免 重新计算。 
           h = (0 != h) ? h : 1;

           hash32 = h;
        }

        return h;
    }

}
